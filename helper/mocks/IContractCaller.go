// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import big "math/big"
import common "github.com/ethereum/go-ethereum/common"

import mock "github.com/stretchr/testify/mock"
import types "github.com/maticnetwork/heimdall/types"

// IContractCaller is an autogenerated mock type for the IContractCaller type
type IContractCaller struct {
	mock.Mock
}

// CurrentChildBlock provides a mock function with given fields:
func (_m *IContractCaller) CurrentChildBlock() (uint64, error) {
	ret := _m.Called()

	var r0 uint64
	if rf, ok := ret.Get(0).(func() uint64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBalance provides a mock function with given fields: address
func (_m *IContractCaller) GetBalance(address common.Address) (*big.Int, error) {
	ret := _m.Called(address)

	var r0 *big.Int
	if rf, ok := ret.Get(0).(func(common.Address) *big.Int); ok {
		r0 = rf(address)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*big.Int)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(common.Address) error); ok {
		r1 = rf(address)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetHeaderInfo provides a mock function with given fields: headerID
func (_m *IContractCaller) GetHeaderInfo(headerID uint64) (common.Hash, uint64, uint64, error) {
	ret := _m.Called(headerID)

	var r0 common.Hash
	if rf, ok := ret.Get(0).(func(uint64) common.Hash); ok {
		r0 = rf(headerID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(common.Hash)
		}
	}

	var r1 uint64
	if rf, ok := ret.Get(1).(func(uint64) uint64); ok {
		r1 = rf(headerID)
	} else {
		r1 = ret.Get(1).(uint64)
	}

	var r2 uint64
	if rf, ok := ret.Get(2).(func(uint64) uint64); ok {
		r2 = rf(headerID)
	} else {
		r2 = ret.Get(2).(uint64)
	}

	var r3 error
	if rf, ok := ret.Get(3).(func(uint64) error); ok {
		r3 = rf(headerID)
	} else {
		r3 = ret.Error(3)
	}

	return r0, r1, r2, r3
}

// GetValidatorInfo provides a mock function with given fields: valID
func (_m *IContractCaller) GetValidatorInfo(valID types.ValidatorID) (types.Validator, error) {
	ret := _m.Called(valID)

	var r0 types.Validator
	if rf, ok := ret.Get(0).(func(types.ValidatorID) types.Validator); ok {
		r0 = rf(valID)
	} else {
		r0 = ret.Get(0).(types.Validator)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(types.ValidatorID) error); ok {
		r1 = rf(valID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SendCheckpoint provides a mock function with given fields: voteSignBytes, sigs, txData
func (_m *IContractCaller) SendCheckpoint(voteSignBytes []byte, sigs []byte, txData []byte) {
	_m.Called(voteSignBytes, sigs, txData)
}
