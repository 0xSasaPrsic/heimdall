---
swagger: "2.0"
info:
  version: "1.0"
  title: Heimdall
  description: A REST interface for state queries, transaction generation and broadcasting.
tags:
  - name: Auth
    description: Auth module APIs
  - name: Bank
    description: Bank module APIs
  - name: Bor
    description: Bor module APIs
  - name: Checkpoint
    description: Checkpoint module APIs
  - name: Clerk
    description: Clerk module APIs
  - name: Staking
    description: Staking module APIs
  - name: Topup
    description: Topup module APIs
schemes:
  - http
host: localhost:1317
securityDefinitions:
  kms:
    type: basic
paths:
  /auth/accounts/{address}:
    parameters:
      - in: path
        name: address
        description: Account Address
        required: true
        type: string
        x-example: "0x6c468cf8c9879006e22ec4029696e005c2319c9d"
    get:
      summary: query account
      tags:
        - Auth
      produces:
        - application/json
      responses:
        200:
          description: OK
          schema:
            $ref: "#/definitions/Account"
        400:
          description: Invalid address
        500:
          description: Internal Server Error
  /auth/accounts/{address}/sequence:
    parameters:
      - in: path
        name: address
        description: Account Address
        required: true
        type: string
        x-example: "0x6c468cf8c9879006e22ec4029696e005c2319c9d"
    get:
      summary: query account sequence
      tags:
        - Auth
      produces:
        - application/json
      responses:
        200:
          description: OK
          schema:
            $ref: "#/definitions/LightBaseAccount"
        400:
          description: Invalid address
        500:
          description: Internal Server Error
  /bank/balances/{address}:
    parameters:
      - in: path
        name: address
        description: Account Address
        required: true
        type: string
        x-example: "0x6c468cf8c9879006e22ec4029696e005c2319c9d"
    get:
      summary: queryBalance fetch an account's balance
      tags:
        - Bank
      produces:
        - application/json
      responses:
        200:
          description: OK
        400:
          description: Invalid address
        500:
          description: Internal Server Error
  /bor/span/list:
    parameters:
      - in: query
        name: page
        description: Page No
        required: false
        type: integer
        x-example: 1
      - in: query
        name: limit
        description: No of items
        required: false
        type: integer
        x-example: 1
    get:
      summary: get span list
      tags:
        - Bor
      produces:
        - application/json
      responses:
        200:
          description: OK
          schema:
            $ref: "#/definitions/SpanList"
        400:
          description: Invalid params
        500:
          description: Internal Server Error
  /bor/span/{id}:
    parameters:
      - in: path
        name: id
        description: span id
        required: true
        type: integer
        x-example: 1
    get:
      summary: get span by id
      tags:
        - Bor
      produces:
        - application/json
      responses:
        200:
          description: OK
          schema:
            $ref: "#/definitions/Span"
        400:
          description: Invalid id
        500:
          description: Internal Server Error
  /bor/latest-span:
    get:
      summary: get latest span
      tags:
        - Bor
      produces:
        - application/json
      responses:
        200:
          description: OK
          schema:
            $ref: "#/definitions/Span"
        500:
          description: Internal Server Error
  /bor/prepare-next-span:
    get:
      parameters:
      - in: query
        name: span id
        description: last span id
        required: true
        type: integer
        x-example: 1
      - in: query
        name: start_block
        description: start block number
        required: true
        type: integer
        x-example: 1
      - in: query
        name: chain_id
        description: chain id
        required: true
        type: string
        x-example: "1"
      summary: prepares next span 
      tags:
        - Bor
      produces:
        - application/json
      responses:
        200:
          description: OK
          schema:
            $ref: "#/definitions/Span"
        400:
          description: Invalid params
        500:
          description: Internal Server Error
  /bor/next-span-seed:
    get:
      summary: get next span seed
      tags:
        - Bor
      produces:
        - application/json
      responses:
        200:
          description: OK
          schema:
            $ref: "#/definitions/HeimdallHash"
        500:
          description: Internal Server Error
  /checkpoints/params:
    get:
      summary: Query checkpoint params
      tags:
        - Checkpoint
      produces:
        - application/json
      responses:
        200:
          description: OK
          schema:
            $ref: "#/definitions/CheckpointParams"
        500:
          description: Internal Server Error
  /overview:
    get:
      summary: get all state-dump of heimdall
      tags:
        - Checkpoint
      produces:
        - application/json
      responses:
        200:
          description: OK
          schema:
            $ref: "#/definitions/StateDump"
        500:
          description: Internal Server Error
  /checkpoints/buffer:
    get:
      summary: query checkpoint buffer
      tags:
        - Checkpoint
      produces:
        - application/json
      responses:
        200:
          description: OK
          schema:
            $ref: "#/definitions/Checkpoint"
        500:
          description: Internal Server Error
  /checkpoints/count:
    get:
      summary: query checkpoint count
      tags:
        - Checkpoint
      produces:
        - application/json
      responses:
        200:
          description: OK
          schema:
            $ref: "#/definitions/CheckpointCountResponse"
        500:
          description: Internal Server Error
  /checkpoints/prepare:
    get:
      parameters:
      - in: query
        name: start
        description: start block id
        required: true
        type: integer
        x-example: 1
      - in: query
        name: end
        description: end block id
        required: true
        type: integer
        x-example: 1
      summary: prepare header block from start and end block
      tags:
        - Checkpoint
      produces:
        - application/json
      responses:
        200:
          description: OK
          schema:
            $ref: "#/definitions/HeaderBlockResult"
        400:
          description: Incorrect params
        500:
          description: Internal Server Error
  /checkpoints/latest:
    get:
      summary: get last checkpoint
      tags:
        - Checkpoint
      produces:
        - application/json
      responses:
        200:
          description: OK
          schema:
            $ref: "#/definitions/Checkpoint"
        500:
          description: Internal Server Error
  /checkpoints/last-no-ack:
    get:
      summary: get last no ack checkpoint
      tags:
        - Checkpoint
      produces:
        - application/json
      responses:
        200:
          description: OK
          schema:
            $ref: "#/definitions/LastNoAckResult"
        500:
          description: Internal Server Error
  /checkpoints/list:
    get:
      parameters:
      - in: query
        name: page
        description: Page No
        required: true
        type: integer
        x-example: 1
      - in: query
        name: limit
        description: No of items
        required: true
        type: integer
        x-example: 1
      summary: get checkpoint list
      tags:
        - Checkpoint
      produces:
        - application/json
      responses:
        200:
          description: OK
          schema:
            $ref: "#/definitions/CheckpointList"
        400:
          description: Invalid params
        500:
          description: Internal Server Error
  /checkpoints/{number}:
    get:
      parameters:
      - in: path
        name: number
        description: Checkpoint number
        required: true
        type: integer
        x-example: 1
      summary: get checkpoint by number
      tags:
        - Checkpoint
      produces:
        - application/json
      responses:
        200:
          description: OK
          schema:
            $ref: "#/definitions/Checkpoint"
        400:
          description: Invalid params
        500:
          description: Internal Server Error
  /clerk/event-record/list:
    get:
      parameters:
      - in: query
        name: page
        description: Page No
        required: false
        type: integer
        x-example: 1
      - in: query
        name: limit
        description: No of items
        required: false
        type: integer
        x-example: 1
      - in: query
        name: from-time
        description: time in epoch
        required: false
        type: integer
        x-example: 1
      - in: query
        name: to-time
        description: time in epoch
        required: false
        type: integer
        x-example: 1
      - in: query
        name: from-id
        description: from id
        required: false
        type: integer
        x-example: 1
      summary: get record list
      tags:
        - Clerk
      produces:
        - application/json
      responses:
        200:
          description: OK
          schema:
            $ref: "#/definitions/EventRecordList"
        400:
          description: Invalid params
        500:
          description: Internal Server Error
  /clerk/event-record/{recordId}:
    get:
      parameters:
      - in: path
        name: recordId
        description: record id
        required: true
        type: integer
        x-example: 1
      summary: get event record by id
      tags:
        - Clerk
      produces:
        - application/json
      responses:
        200:
          description: OK
          schema:
            $ref: "#/definitions/EventRecord"
        400:
          description: Invalid params
        500:
          description: Internal Server Error
  /staking/signer/{address}:
    parameters:
      - in: path
        name: address
        description: Signer Address of Validator
        required: true
        type: string
        x-example: "0x6c468cf8c9879006e22ec4029696e005c2319c9d"
    get:
      summary: Query the information from a single validator
      tags:
        - Staking
      produces:
        - application/json
      responses:
        200:
          description: OK
          schema:
            $ref: "#/definitions/Validator"
        400:
          description: Invalid signer address
        500:
          description: Internal Server Error
  /staking/validator-status/{address}:
    parameters:
      - in: path
        name: address
        description: Signer Address of Validator
        required: true
        type: string
        x-example: "0x6c468cf8c9879006e22ec4029696e005c2319c9d"
    get:
      summary: Query the Status Info of Validator
      tags:
        - Staking
      produces:
        - application/json
      responses:
        200:
          description: OK
          schema:
            type: object
            properties:
              status:
                type: boolean
        400:
          description: Invalid signer address
        500:
          description: Internal Server Error
  /staking/validator/{id}:
    parameters:
      - in: path
        name: id
        description: Get Validator by val ID
        required: true
        type: integer
        x-example: 1
    get:
      summary: Query the Validator by val ID
      tags:
        - Staking
      produces:
        - application/json
      responses:
        200:
          description: OK
          schema:
            $ref: "#/definitions/Validator"
        400:
          description: Invalid Validator ID
        500:
          description: Internal Server Error
  /staking/current-proposer:
    get:
      summary: Query the Current Block Proposer
      tags:
        - Staking
      produces:
        - application/json
      responses:
        200:
          description: OK
          schema:
            $ref: "#/definitions/Validator"
        500:
          description: Internal Server Error
  /staking/validator-set:
    get:
      summary: Query the Current Validator Set
      tags:
        - Staking
      produces:
        - application/json
      responses:
        200:
          description: OK
          schema:
            $ref: "#/definitions/ValidatorSet"
        500:
          description: Internal Server Error
  /staking/checkpoint-reward:
    get:
      summary: Query the checkpoint reward
      tags:
        - Staking
      produces:
        - application/json
      responses:
        200:
          description: OK
          schema:
            type: object
            properties:
              result:
                type: integer
        500:
          description: Internal Server Error
  /staking/proposer-bonus-percent:
    get:
      summary: Query the proposer bonus percent
      tags:
        - Staking
      produces:
        - application/json
      responses:
        200:
          description: OK
          schema:
            type: object
            properties:
              result:
                type: integer
        500:
          description: Internal Server Error
  /topup/dividend-account/{address}:
    parameters:
      - in: path
        name: address
        description: Account Address
        required: true
        type: string
        x-example: "0x6c468cf8c9879006e22ec4029696e005c2319c9d"
    get:
      summary: Get Dividend Account of Address
      tags:
        - Topup
      produces:
        - application/json
      responses:
        200:
          description: OK
          schema:
            $ref: "#/definitions/DividendAccount"
        400:
          description: Invalid signer address
        500:
          description: Internal Server Error
  /topup/dividend-account-root:
    get:
      summary: Returns genesis accountroothash
      tags:
        - Topup
      produces:
        - application/json
      responses:
        200:
          description: OK
          schema:
            $ref: "#/definitions/HeimdallHash"
        500:
          description: Internal Server Error
  /topup/account-proof/{address}/verify:
    parameters:
      - in: path
        name: address
        description: Account Address
        required: true
        type: string
        x-example: "0x6c468cf8c9879006e22ec4029696e005c2319c9d"
    get:
      summary: Returns true if given Merkle path for dividendAccountID is valid
      tags:
        - Topup
      produces:
        - application/json
      responses:
        200:
          description: OK
          schema:
            $ref: "#/definitions/VerifyAccountProofResult"
        500:
          description: Internal Server Error
  /topup/account-proof/{address}:
    parameters:
      - in: path
        name: address
        description: Account Address
        required: true
        type: string
        x-example: "0x6c468cf8c9879006e22ec4029696e005c2319c9d"
    get:
      summary: Returns Merkle path for dividendAccountID using dividend Account Tree
      tags:
        - Topup
      produces:
        - application/json
      responses:
        200:
          description: OK
          schema:
            $ref: "#/definitions/DividendAccountProof"
        500:
          description: Internal Server Error
definitions:
  Address:
    type: string
    description: hex address
    example: 0x6c468cf8c9879006e22ec4029696e005c2319c9d
  ValidatorAddress:
    type: string
    description: hex address
    example: "0x6c468cf8c9879006e22ec4029696e005c2319c9d"
  HeimdallAddress:
    type: string
    description: hex address
    example: "0x6c468cf8c9879006e22ec4029696e005c2319c9d"
  HeimdallHash:
    type: string
    description: common.Hash
    example: "0x6c468cf8c9879006e22ec4029696e005c2319c9d"
  Validator:
    type: object
    properties:
      ID:
        type: integer
        example: 1
      startEpoch:
        type: integer
        example: 0
      EndEpoch:
        type: integer
        example: 0
      VotingPower:
        type: integer
        example: 10
      PubKey:
        type: string
        example : "0x04b12d8b2f6e3d45a7ace12c4b2158f79b95e4c28ebe5ad54c439be9431d7fc9dc1164210bf6a5c3b8523528b931e772c86a307e8cff4b725e6b4a77d21417bf19"
      signer:
        $ref: "#/definitions/Address"
      LastUpdated:
        type: integer
        example: 0
      accum:
        type: integer
        example: 0
  PublicKey:
    type: object
    properties:
      value:
        type: string
  PrivateKey:
    type: object
    properties:
      value:
        type: string
  ValidatorSet:
    type: object
    properties:
      validators:
        type: array
        items:
          $ref: "#/definitions/Validator"
      proposer:
          $ref: "#/definitions/Validator"
  Checkpoint:
    type: object
    properties:
      Proposer:
        $ref: "#/definitions/HeimdallAddress"
      StartBlock:
        type: integer
        example: 0
      EndBlock:
        type: integer
        example: 0
      RootHash:
        $ref: "#/definitions/HeimdallHash"
      RewardRootHash:
        $ref: "#/definitions/HeimdallHash"
      TimeStamp:
        type: integer
        example: 0
  CheckpointList:
    type: array
    items:
      $ref: "#/definitions/Checkpoint"
  Span:
    type: object
    properties:
      ID:
        type: integer
        example: 2
      StartBlock:
        type: integer
        example: 0
      EndBlock:
        type: integer
        example: 0
      ValidatorSet:
        $ref: "#/definitions/ValidatorSet"
      SelectedProducers:
        type: array
        items:
          $ref: "#/definitions/Validator"
      ChainID:
        type: string
        example: "heimdall-P5rXwg"
  SpanList:
    type: array
    items:
      $ref: "#/definitions/Span"
  Account:
    type: object
    properties:
      Address:
        $ref: "#/definitions/HeimdallHash"
      PrivKey:
        $ref: "#/definitions/PrivateKey"
      PubKey:
        $ref: "#/definitions/PublicKey"
  LightBaseAccount:
    type: object
    properties:
      address:
        $ref: "#/definitions/HeimdallHash"
      account_number:
        type: integer
      sequence:
        type: integer
  DividendAccount:
    type: object
    properties:
      user:
        $ref: "#/definitions/HeimdallHash"
      feeAmount:
        type: string
  EventRecord:
    type: object
    properties:
      id:
        type: integer
        example: 2
      contract:
        $ref: "#/definitions/HeimdallAddress"
      tx_hash:
        $ref: "#/definitions/HeimdallHash"
      log_index:
        type: integer
        example: 2
      bor_chain_id:
        type: string
        example: "heimdall-P5rXwg"
      record_time:
        type: string
  EventRecordList:
    type: array
    items:
      $ref: "#/definitions/EventRecord"
  LastNoAckResult:
    type: object
    properties:
      result:
        type: integer
        example: 2
  StateDump:
    type: object
    properties:
      ack_count:
        type: integer
        example: 2
      checkpoint_buffer:
        $ref: "#/definitions/Checkpoint"
      validator_count:
        type: integer
        example: 2
      validator_set:
        $ref: "#/definitions/ValidatorSet"
      last_noack_time:
        type: string
  CheckpointCountResponse:
    type: object
    properties:
      result:
        type: integer
        example: 2
  HeaderBlockResult:
    type: object
    properties:
      proposer:
        $ref: "#/definitions/HeimdallAddress"
      rootHash:
        $ref: "#/definitions/HeimdallHash"
      startBlock:
        type: integer
        example: 2
      endBlock:
        type: integer
        example: 2
  CheckpointParams:
    type: object
    properties:
      checkpoint_buffer_time:
        type: string
      avg_checkpoint_length:
        type: integer
        example: 2
      max_checkpoint_length:
        type: integer
        example: 2
      child_chain_block_interval:
        type: integer
        example: 2
  DividendAccountProof:
    type: object
    properties:
      user:
        $ref: "#/definitions/HeimdallAddress"
      accountProof:
        type: array
        items:
          type: string
          format: byte
      index:
        type: integer
        example: 2
  VerifyAccountProofResult:
    type: object
    properties:
      result:
        type: boolean
  MsgProposeSpan:
    type: object
    properties:
      proposer:
        $ref: "#/definitions/HeimdallAddress"
      seed:
        $ref: "#/definitions/HeimdallHash"
      span_id:
        type: integer
        example: 2
      end_block:
        type: integer
        example: 2
      start_block:
        type: integer
        example: 2
      chain_id:
        type: string
        example: "heimdall-P5rXwg"