syntax = "proto3";
package heimdall.bor.v1beta1;

import "gogoproto/gogo.proto";
import "heimdall/base/v1beta1/span.proto";
import "heimdall/base/v1beta1/query.proto";
import "heimdall/base/v1beta1/validator.proto";
import "google/api/annotations.proto";

option go_package            = "github.com/maticnetwork/heimdall/x/bor/types";
option (gogoproto.sizer_all) = true;
option (gogoproto.marshaler_all)   = true;
option (gogoproto.unmarshaler_all) = true;

service Query {
    rpc Params(QueryParamsRequest) returns (QueryParamsResponse) {
        option (google.api.http).get = "/heimdall/bor/v1beta1/params";
    }

    rpc Param(QueryParamRequest) returns (QueryParamResponse) {
        option (google.api.http).get =
            "/heimdall/bor/v1beta1/params/{params_type}";
    };

    rpc SpanList(QuerySpanListRequest) returns (QuerySpanListResponse) {
        option (google.api.http).get = "/heimdall/bor/v1beta1/span-list";
    }

    rpc Span(QuerySpanRequest) returns (QuerySpanResponse) {
        option (google.api.http).get = "/heimdall/bor/v1beta1/span/{span_id}";
    };

    rpc LatestSpan(QueryLatestSpanRequest) returns (QueryLatestSpanResponse) {
        option (google.api.http).get = "/heimdall/bor/v1beta1/latest-span";
    }

    rpc NextProducers(QueryNextProducersRequest)
        returns (QueryNextProducersResponse) {
        option (google.api.http).get =
            "/heimdall/bor/v1beta1/prepare-next-producers";
    }

    rpc PrepareNextSpan(QueryPrepareNextSpanRequest)
        returns (QueryPrepareNextSpanResponse) {
        option (google.api.http).get =
            "/heimdall/bor/v1beta1/prepare-next-span";
    }

    rpc NextSpanSeed(QueryNextSpanSeedRequest)
        returns (QueryNextSpanSeedResponse) {
        option (google.api.http).get = "/heimdall/bor/v1beta1/next-span-seed";
    }
}

// get params info
message QueryParamsRequest {}
message QueryParamsResponse {
    uint64 span_duration    = 1;
    uint64 latest_eth_block = 2;
    uint64 producer_count   = 3;
    uint64 sprint           = 4;
}

// get param info
message QueryParamRequest {
    string params_type = 1;
}
message QueryParamResponse {
    oneof params {
        uint64 span_duration    = 1;
        uint64 latest_eth_block = 2;
        uint64 producer_count   = 3;
        uint64 sprint           = 4;
    }
}

// span
message QuerySpanRequest {
    uint64 span_id = 1 [(gogoproto.moretags) = "yaml:\"span_id\""];
}
message QuerySpanResponse {
    heimdall.types.Span Span = 1;
}

// span list
message QuerySpanListRequest {
    heimdall.types.QueryPaginationParams pagination = 1;
}
message QuerySpanListResponse {
    repeated heimdall.types.Span Spans = 1;
}

// latest span
message QueryLatestSpanRequest {}

message QueryLatestSpanResponse {
    heimdall.types.Span Span = 1;
}

// QueryNextProducers
message QueryNextProducersRequest {}
message QueryNextProducersResponse {
    repeated heimdall.types.Validator next_producers = 1
        [(gogoproto.nullable) = false];
}

// QueryNextSpanSeed
message QueryNextSpanSeedRequest {}
message QueryNextSpanSeedResponse {
    string next_span_seed = 1;
}
// QueryPrepareNextSpan
message QueryPrepareNextSpanRequest {
    uint64 span_id     = 1;
    uint64 start_block = 2;
    string chain_id    = 3;
    string proposer    = 4;
}
message QueryPrepareNextSpanResponse {
    heimdall.types.Span Span = 1;
}
