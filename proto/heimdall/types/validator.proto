syntax = "proto3";

package heimdall.types;

import "gogoproto/gogo.proto";

option go_package = "github.com/maticnetwork/heimdall/types";

//option (gogoproto.sizer_all)        = false;
//option (gogoproto.marshaler_all)        = false;
//option (gogoproto.unmarshaler_all)        = false;

message ValidatorSet {
  option (gogoproto.goproto_getters)  = false;
  option (gogoproto.goproto_stringer)        = false;

  repeated Validator         validators = 1 ;
  Validator                  proposer = 2;
  int64                      total_voting_power = 3;
}

message Validator {
  option (gogoproto.goproto_getters)  = false;
  option (gogoproto.goproto_stringer)        = false;
  ValidatorID                 ID                = 1;
  uint64                      start_epoch       = 2;
  uint64                      end_epoch         = 3;
  uint64                      nonce             = 4;
  int64                       voting_power      = 5;
  bytes                       pub_key = 6 [
    (gogoproto.customtype)   = "github.com/maticnetwork/heimdall/types/common.PubKey"
  ];
  bytes                       signer = 7 [
    (gogoproto.customtype)   = "github.com/maticnetwork/heimdall/types/common.HeimdallAddress"
  ];
  string                      last_updated      = 8;
  bool                        Jailed            = 9;
  int64                       proposer_priority = 10;
}


enum ValidatorID {
  DEFAULT = 0;
  option (gogoproto.goproto_enum_stringer) = false;
  option (gogoproto.goproto_enum_prefix)   = false;
}


message MinimalVal {
  option (gogoproto.goproto_getters)  = false;
  // option (gogoproto.goproto_stringer)        = false;
  ValidatorID                 ID                = 1;
  uint64                      voting_power       = 2;
  bytes                       signer = 3 [
    (gogoproto.casttype)   = "github.com/maticnetwork/heimdall/types/common.HeimdallAddress"
  ];
}
