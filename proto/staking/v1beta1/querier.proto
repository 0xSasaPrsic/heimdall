syntax = "proto3";
package heimdall.staking.v1beta1;

import "heimdall/types/validator.proto";
import "google/api/annotations.proto";
import "gogoproto/gogo.proto";



option go_package = "github.com/maticnetwork/heimdall/x/staking/types";

option (gogoproto.sizer_all)       = true;
option (gogoproto.marshaler_all)   = true;
option (gogoproto.unmarshaler_all) = true;
// Query defines the gRPC querier service.
service Query {
    // Validators queries all validators that match the given status.
  rpc Validator(QueryValidatorRequest) returns (QueryValidatorResponse) {
    option (google.api.http).get = "heimdall/types/validator/{validator_id}";
  }
}

// QueryValidatorRequest is response type for the Query/Validator RPC method
message QueryValidatorRequest {
    // validator_addr defines the validator address to query for.
    heimdall.types.ValidatorID validator_id = 1;
}
  
  // QueryValidatorResponse is response type for the Query/Validator RPC method
message QueryValidatorResponse {
    // validator defines the the validator info.
    heimdall.types.Validator validator = 1 ;
}
