// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: heimdall/bor/v1beta1/query.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/maticnetwork/heimdall/types"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// get params info
type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e8643ca7cfaca281, []int{0}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

type QueryParamsResponse struct {
	SpanDuration   uint64 `protobuf:"varint,1,opt,name=span_duration,json=spanDuration,proto3" json:"span_duration,omitempty"`
	LatestEthBlock uint64 `protobuf:"varint,2,opt,name=latest_eth_block,json=latestEthBlock,proto3" json:"latest_eth_block,omitempty"`
	ProducerCount  uint64 `protobuf:"varint,3,opt,name=producer_count,json=producerCount,proto3" json:"producer_count,omitempty"`
	Sprint         uint64 `protobuf:"varint,4,opt,name=sprint,proto3" json:"sprint,omitempty"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e8643ca7cfaca281, []int{1}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetSpanDuration() uint64 {
	if m != nil {
		return m.SpanDuration
	}
	return 0
}

func (m *QueryParamsResponse) GetLatestEthBlock() uint64 {
	if m != nil {
		return m.LatestEthBlock
	}
	return 0
}

func (m *QueryParamsResponse) GetProducerCount() uint64 {
	if m != nil {
		return m.ProducerCount
	}
	return 0
}

func (m *QueryParamsResponse) GetSprint() uint64 {
	if m != nil {
		return m.Sprint
	}
	return 0
}

// get param info
type QueryParamRequest struct {
	ParamsType string `protobuf:"bytes,1,opt,name=params_type,json=paramsType,proto3" json:"params_type,omitempty"`
}

func (m *QueryParamRequest) Reset()         { *m = QueryParamRequest{} }
func (m *QueryParamRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamRequest) ProtoMessage()    {}
func (*QueryParamRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e8643ca7cfaca281, []int{2}
}
func (m *QueryParamRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamRequest.Merge(m, src)
}
func (m *QueryParamRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamRequest proto.InternalMessageInfo

func (m *QueryParamRequest) GetParamsType() string {
	if m != nil {
		return m.ParamsType
	}
	return ""
}

type QueryParamResponse struct {
	// Types that are valid to be assigned to Params:
	//	*QueryParamResponse_SpanDuration
	//	*QueryParamResponse_LatestEthBlock
	//	*QueryParamResponse_ProducerCount
	//	*QueryParamResponse_Sprint
	Params isQueryParamResponse_Params `protobuf_oneof:"params"`
}

func (m *QueryParamResponse) Reset()         { *m = QueryParamResponse{} }
func (m *QueryParamResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamResponse) ProtoMessage()    {}
func (*QueryParamResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e8643ca7cfaca281, []int{3}
}
func (m *QueryParamResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamResponse.Merge(m, src)
}
func (m *QueryParamResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamResponse proto.InternalMessageInfo

type isQueryParamResponse_Params interface {
	isQueryParamResponse_Params()
	MarshalTo([]byte) (int, error)
	Size() int
}

type QueryParamResponse_SpanDuration struct {
	SpanDuration uint64 `protobuf:"varint,1,opt,name=span_duration,json=spanDuration,proto3,oneof" json:"span_duration,omitempty"`
}
type QueryParamResponse_LatestEthBlock struct {
	LatestEthBlock uint64 `protobuf:"varint,2,opt,name=latest_eth_block,json=latestEthBlock,proto3,oneof" json:"latest_eth_block,omitempty"`
}
type QueryParamResponse_ProducerCount struct {
	ProducerCount uint64 `protobuf:"varint,3,opt,name=producer_count,json=producerCount,proto3,oneof" json:"producer_count,omitempty"`
}
type QueryParamResponse_Sprint struct {
	Sprint uint64 `protobuf:"varint,4,opt,name=sprint,proto3,oneof" json:"sprint,omitempty"`
}

func (*QueryParamResponse_SpanDuration) isQueryParamResponse_Params()   {}
func (*QueryParamResponse_LatestEthBlock) isQueryParamResponse_Params() {}
func (*QueryParamResponse_ProducerCount) isQueryParamResponse_Params()  {}
func (*QueryParamResponse_Sprint) isQueryParamResponse_Params()         {}

func (m *QueryParamResponse) GetParams() isQueryParamResponse_Params {
	if m != nil {
		return m.Params
	}
	return nil
}

func (m *QueryParamResponse) GetSpanDuration() uint64 {
	if x, ok := m.GetParams().(*QueryParamResponse_SpanDuration); ok {
		return x.SpanDuration
	}
	return 0
}

func (m *QueryParamResponse) GetLatestEthBlock() uint64 {
	if x, ok := m.GetParams().(*QueryParamResponse_LatestEthBlock); ok {
		return x.LatestEthBlock
	}
	return 0
}

func (m *QueryParamResponse) GetProducerCount() uint64 {
	if x, ok := m.GetParams().(*QueryParamResponse_ProducerCount); ok {
		return x.ProducerCount
	}
	return 0
}

func (m *QueryParamResponse) GetSprint() uint64 {
	if x, ok := m.GetParams().(*QueryParamResponse_Sprint); ok {
		return x.Sprint
	}
	return 0
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*QueryParamResponse) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*QueryParamResponse_SpanDuration)(nil),
		(*QueryParamResponse_LatestEthBlock)(nil),
		(*QueryParamResponse_ProducerCount)(nil),
		(*QueryParamResponse_Sprint)(nil),
	}
}

// span
type QuerySpanRequest struct {
	SpanId uint64 `protobuf:"varint,1,opt,name=span_id,json=spanId,proto3" json:"span_id,omitempty" yaml:"span_id"`
}

func (m *QuerySpanRequest) Reset()         { *m = QuerySpanRequest{} }
func (m *QuerySpanRequest) String() string { return proto.CompactTextString(m) }
func (*QuerySpanRequest) ProtoMessage()    {}
func (*QuerySpanRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e8643ca7cfaca281, []int{4}
}
func (m *QuerySpanRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuerySpanRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuerySpanRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuerySpanRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySpanRequest.Merge(m, src)
}
func (m *QuerySpanRequest) XXX_Size() int {
	return m.Size()
}
func (m *QuerySpanRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySpanRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySpanRequest proto.InternalMessageInfo

func (m *QuerySpanRequest) GetSpanId() uint64 {
	if m != nil {
		return m.SpanId
	}
	return 0
}

type QuerySpanResponse struct {
	Span *types.Span `protobuf:"bytes,1,opt,name=Span,proto3" json:"Span,omitempty"`
}

func (m *QuerySpanResponse) Reset()         { *m = QuerySpanResponse{} }
func (m *QuerySpanResponse) String() string { return proto.CompactTextString(m) }
func (*QuerySpanResponse) ProtoMessage()    {}
func (*QuerySpanResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e8643ca7cfaca281, []int{5}
}
func (m *QuerySpanResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuerySpanResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuerySpanResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuerySpanResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySpanResponse.Merge(m, src)
}
func (m *QuerySpanResponse) XXX_Size() int {
	return m.Size()
}
func (m *QuerySpanResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySpanResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySpanResponse proto.InternalMessageInfo

func (m *QuerySpanResponse) GetSpan() *types.Span {
	if m != nil {
		return m.Span
	}
	return nil
}

// span list
type QuerySpanListRequest struct {
	Pagination *types.QueryPaginationParams `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QuerySpanListRequest) Reset()         { *m = QuerySpanListRequest{} }
func (m *QuerySpanListRequest) String() string { return proto.CompactTextString(m) }
func (*QuerySpanListRequest) ProtoMessage()    {}
func (*QuerySpanListRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e8643ca7cfaca281, []int{6}
}
func (m *QuerySpanListRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuerySpanListRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuerySpanListRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuerySpanListRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySpanListRequest.Merge(m, src)
}
func (m *QuerySpanListRequest) XXX_Size() int {
	return m.Size()
}
func (m *QuerySpanListRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySpanListRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySpanListRequest proto.InternalMessageInfo

func (m *QuerySpanListRequest) GetPagination() *types.QueryPaginationParams {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QuerySpanListResponse struct {
	Spans []*types.Span `protobuf:"bytes,1,rep,name=Spans,proto3" json:"Spans,omitempty"`
}

func (m *QuerySpanListResponse) Reset()         { *m = QuerySpanListResponse{} }
func (m *QuerySpanListResponse) String() string { return proto.CompactTextString(m) }
func (*QuerySpanListResponse) ProtoMessage()    {}
func (*QuerySpanListResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e8643ca7cfaca281, []int{7}
}
func (m *QuerySpanListResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuerySpanListResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuerySpanListResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuerySpanListResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySpanListResponse.Merge(m, src)
}
func (m *QuerySpanListResponse) XXX_Size() int {
	return m.Size()
}
func (m *QuerySpanListResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySpanListResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySpanListResponse proto.InternalMessageInfo

func (m *QuerySpanListResponse) GetSpans() []*types.Span {
	if m != nil {
		return m.Spans
	}
	return nil
}

// latest span
type QueryLatestSpanRequest struct {
}

func (m *QueryLatestSpanRequest) Reset()         { *m = QueryLatestSpanRequest{} }
func (m *QueryLatestSpanRequest) String() string { return proto.CompactTextString(m) }
func (*QueryLatestSpanRequest) ProtoMessage()    {}
func (*QueryLatestSpanRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e8643ca7cfaca281, []int{8}
}
func (m *QueryLatestSpanRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLatestSpanRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLatestSpanRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLatestSpanRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLatestSpanRequest.Merge(m, src)
}
func (m *QueryLatestSpanRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryLatestSpanRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLatestSpanRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLatestSpanRequest proto.InternalMessageInfo

type QueryLatestSpanResponse struct {
	Span *types.Span `protobuf:"bytes,1,opt,name=Span,proto3" json:"Span,omitempty"`
}

func (m *QueryLatestSpanResponse) Reset()         { *m = QueryLatestSpanResponse{} }
func (m *QueryLatestSpanResponse) String() string { return proto.CompactTextString(m) }
func (*QueryLatestSpanResponse) ProtoMessage()    {}
func (*QueryLatestSpanResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e8643ca7cfaca281, []int{9}
}
func (m *QueryLatestSpanResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLatestSpanResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLatestSpanResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLatestSpanResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLatestSpanResponse.Merge(m, src)
}
func (m *QueryLatestSpanResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryLatestSpanResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLatestSpanResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLatestSpanResponse proto.InternalMessageInfo

func (m *QueryLatestSpanResponse) GetSpan() *types.Span {
	if m != nil {
		return m.Span
	}
	return nil
}

// QueryNextProducers
type QueryNextProducersRequest struct {
}

func (m *QueryNextProducersRequest) Reset()         { *m = QueryNextProducersRequest{} }
func (m *QueryNextProducersRequest) String() string { return proto.CompactTextString(m) }
func (*QueryNextProducersRequest) ProtoMessage()    {}
func (*QueryNextProducersRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e8643ca7cfaca281, []int{10}
}
func (m *QueryNextProducersRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryNextProducersRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryNextProducersRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryNextProducersRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryNextProducersRequest.Merge(m, src)
}
func (m *QueryNextProducersRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryNextProducersRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryNextProducersRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryNextProducersRequest proto.InternalMessageInfo

type QueryNextProducersResponse struct {
	NextProducers []types.Validator `protobuf:"bytes,1,rep,name=next_producers,json=nextProducers,proto3" json:"next_producers"`
}

func (m *QueryNextProducersResponse) Reset()         { *m = QueryNextProducersResponse{} }
func (m *QueryNextProducersResponse) String() string { return proto.CompactTextString(m) }
func (*QueryNextProducersResponse) ProtoMessage()    {}
func (*QueryNextProducersResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e8643ca7cfaca281, []int{11}
}
func (m *QueryNextProducersResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryNextProducersResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryNextProducersResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryNextProducersResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryNextProducersResponse.Merge(m, src)
}
func (m *QueryNextProducersResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryNextProducersResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryNextProducersResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryNextProducersResponse proto.InternalMessageInfo

func (m *QueryNextProducersResponse) GetNextProducers() []types.Validator {
	if m != nil {
		return m.NextProducers
	}
	return nil
}

// QueryNextSpanSeed
type QueryNextSpanSeedRequest struct {
}

func (m *QueryNextSpanSeedRequest) Reset()         { *m = QueryNextSpanSeedRequest{} }
func (m *QueryNextSpanSeedRequest) String() string { return proto.CompactTextString(m) }
func (*QueryNextSpanSeedRequest) ProtoMessage()    {}
func (*QueryNextSpanSeedRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e8643ca7cfaca281, []int{12}
}
func (m *QueryNextSpanSeedRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryNextSpanSeedRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryNextSpanSeedRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryNextSpanSeedRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryNextSpanSeedRequest.Merge(m, src)
}
func (m *QueryNextSpanSeedRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryNextSpanSeedRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryNextSpanSeedRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryNextSpanSeedRequest proto.InternalMessageInfo

type QueryNextSpanSeedResponse struct {
	NextSpanSeed string `protobuf:"bytes,1,opt,name=next_span_seed,json=nextSpanSeed,proto3" json:"next_span_seed,omitempty"`
}

func (m *QueryNextSpanSeedResponse) Reset()         { *m = QueryNextSpanSeedResponse{} }
func (m *QueryNextSpanSeedResponse) String() string { return proto.CompactTextString(m) }
func (*QueryNextSpanSeedResponse) ProtoMessage()    {}
func (*QueryNextSpanSeedResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e8643ca7cfaca281, []int{13}
}
func (m *QueryNextSpanSeedResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryNextSpanSeedResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryNextSpanSeedResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryNextSpanSeedResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryNextSpanSeedResponse.Merge(m, src)
}
func (m *QueryNextSpanSeedResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryNextSpanSeedResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryNextSpanSeedResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryNextSpanSeedResponse proto.InternalMessageInfo

func (m *QueryNextSpanSeedResponse) GetNextSpanSeed() string {
	if m != nil {
		return m.NextSpanSeed
	}
	return ""
}

// QueryPrepareNextSpan
type QueryPrepareNextSpanRequest struct {
	SpanId     uint64 `protobuf:"varint,1,opt,name=span_id,json=spanId,proto3" json:"span_id,omitempty"`
	StartBlock uint64 `protobuf:"varint,2,opt,name=start_block,json=startBlock,proto3" json:"start_block,omitempty"`
	ChainId    string `protobuf:"bytes,3,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	Proposer   string `protobuf:"bytes,4,opt,name=proposer,proto3" json:"proposer,omitempty"`
}

func (m *QueryPrepareNextSpanRequest) Reset()         { *m = QueryPrepareNextSpanRequest{} }
func (m *QueryPrepareNextSpanRequest) String() string { return proto.CompactTextString(m) }
func (*QueryPrepareNextSpanRequest) ProtoMessage()    {}
func (*QueryPrepareNextSpanRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e8643ca7cfaca281, []int{14}
}
func (m *QueryPrepareNextSpanRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPrepareNextSpanRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPrepareNextSpanRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPrepareNextSpanRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPrepareNextSpanRequest.Merge(m, src)
}
func (m *QueryPrepareNextSpanRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryPrepareNextSpanRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPrepareNextSpanRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPrepareNextSpanRequest proto.InternalMessageInfo

func (m *QueryPrepareNextSpanRequest) GetSpanId() uint64 {
	if m != nil {
		return m.SpanId
	}
	return 0
}

func (m *QueryPrepareNextSpanRequest) GetStartBlock() uint64 {
	if m != nil {
		return m.StartBlock
	}
	return 0
}

func (m *QueryPrepareNextSpanRequest) GetChainId() string {
	if m != nil {
		return m.ChainId
	}
	return ""
}

func (m *QueryPrepareNextSpanRequest) GetProposer() string {
	if m != nil {
		return m.Proposer
	}
	return ""
}

type QueryPrepareNextSpanResponse struct {
	Span *types.Span `protobuf:"bytes,1,opt,name=Span,proto3" json:"Span,omitempty"`
}

func (m *QueryPrepareNextSpanResponse) Reset()         { *m = QueryPrepareNextSpanResponse{} }
func (m *QueryPrepareNextSpanResponse) String() string { return proto.CompactTextString(m) }
func (*QueryPrepareNextSpanResponse) ProtoMessage()    {}
func (*QueryPrepareNextSpanResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e8643ca7cfaca281, []int{15}
}
func (m *QueryPrepareNextSpanResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPrepareNextSpanResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPrepareNextSpanResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPrepareNextSpanResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPrepareNextSpanResponse.Merge(m, src)
}
func (m *QueryPrepareNextSpanResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryPrepareNextSpanResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPrepareNextSpanResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPrepareNextSpanResponse proto.InternalMessageInfo

func (m *QueryPrepareNextSpanResponse) GetSpan() *types.Span {
	if m != nil {
		return m.Span
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryParamsRequest)(nil), "heimdall.bor.v1beta1.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "heimdall.bor.v1beta1.QueryParamsResponse")
	proto.RegisterType((*QueryParamRequest)(nil), "heimdall.bor.v1beta1.QueryParamRequest")
	proto.RegisterType((*QueryParamResponse)(nil), "heimdall.bor.v1beta1.QueryParamResponse")
	proto.RegisterType((*QuerySpanRequest)(nil), "heimdall.bor.v1beta1.QuerySpanRequest")
	proto.RegisterType((*QuerySpanResponse)(nil), "heimdall.bor.v1beta1.QuerySpanResponse")
	proto.RegisterType((*QuerySpanListRequest)(nil), "heimdall.bor.v1beta1.QuerySpanListRequest")
	proto.RegisterType((*QuerySpanListResponse)(nil), "heimdall.bor.v1beta1.QuerySpanListResponse")
	proto.RegisterType((*QueryLatestSpanRequest)(nil), "heimdall.bor.v1beta1.QueryLatestSpanRequest")
	proto.RegisterType((*QueryLatestSpanResponse)(nil), "heimdall.bor.v1beta1.QueryLatestSpanResponse")
	proto.RegisterType((*QueryNextProducersRequest)(nil), "heimdall.bor.v1beta1.QueryNextProducersRequest")
	proto.RegisterType((*QueryNextProducersResponse)(nil), "heimdall.bor.v1beta1.QueryNextProducersResponse")
	proto.RegisterType((*QueryNextSpanSeedRequest)(nil), "heimdall.bor.v1beta1.QueryNextSpanSeedRequest")
	proto.RegisterType((*QueryNextSpanSeedResponse)(nil), "heimdall.bor.v1beta1.QueryNextSpanSeedResponse")
	proto.RegisterType((*QueryPrepareNextSpanRequest)(nil), "heimdall.bor.v1beta1.QueryPrepareNextSpanRequest")
	proto.RegisterType((*QueryPrepareNextSpanResponse)(nil), "heimdall.bor.v1beta1.QueryPrepareNextSpanResponse")
}

func init() { proto.RegisterFile("heimdall/bor/v1beta1/query.proto", fileDescriptor_e8643ca7cfaca281) }

var fileDescriptor_e8643ca7cfaca281 = []byte{
	// 970 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x96, 0xcf, 0x6f, 0x1b, 0x45,
	0x14, 0xc7, 0xbd, 0xcd, 0x8f, 0x26, 0x2f, 0x3f, 0x28, 0x83, 0x69, 0x9d, 0x6d, 0xe4, 0x24, 0xdb,
	0xa4, 0x76, 0x52, 0x7b, 0x97, 0x98, 0x9e, 0x90, 0x10, 0xc2, 0xa1, 0x95, 0x2b, 0x55, 0xa8, 0xb8,
	0x88, 0x03, 0x12, 0xb2, 0xc6, 0xde, 0x91, 0xbd, 0xaa, 0xbd, 0xb3, 0xdd, 0x1d, 0x97, 0x44, 0x55,
	0x2f, 0x20, 0x6e, 0xa8, 0x42, 0x82, 0x2b, 0x27, 0x2e, 0x70, 0xe7, 0x3f, 0xe0, 0xd2, 0x63, 0x25,
	0x2e, 0x9c, 0x2a, 0x94, 0xf0, 0x17, 0xf0, 0x17, 0x54, 0xf3, 0x76, 0x76, 0xbd, 0xd9, 0xac, 0x7f,
	0xe4, 0x96, 0x7d, 0xf3, 0x9d, 0xef, 0x7c, 0xde, 0xcc, 0x7b, 0xcf, 0x81, 0xed, 0x1e, 0x73, 0x06,
	0x36, 0xed, 0xf7, 0xad, 0x36, 0xf7, 0xad, 0x67, 0x87, 0x6d, 0x26, 0xe8, 0xa1, 0xf5, 0x74, 0xc8,
	0xfc, 0x13, 0xd3, 0xf3, 0xb9, 0xe0, 0x24, 0x1f, 0x29, 0xcc, 0x36, 0xf7, 0x4d, 0xa5, 0xd0, 0xf3,
	0x5d, 0xde, 0xe5, 0x28, 0xb0, 0xe4, 0x5f, 0xa1, 0x56, 0x4f, 0xb8, 0xd1, 0x80, 0xc5, 0x76, 0x81,
	0x47, 0x5d, 0xa5, 0xd8, 0xc9, 0x56, 0x24, 0x0e, 0xd4, 0xf7, 0xb2, 0x25, 0xcf, 0x68, 0xdf, 0xb1,
	0xa9, 0xe0, 0xbe, 0x92, 0x6d, 0x76, 0x39, 0xef, 0xf6, 0x99, 0x45, 0x3d, 0xc7, 0xa2, 0xae, 0xcb,
	0x05, 0x15, 0x0e, 0x77, 0x83, 0x70, 0xd5, 0xc8, 0x03, 0xf9, 0x42, 0x7a, 0x3e, 0xa2, 0x3e, 0x1d,
	0x04, 0x4d, 0xf6, 0x74, 0xc8, 0x02, 0x61, 0xfc, 0xa6, 0xc1, 0x7b, 0xe7, 0xc2, 0x81, 0xc7, 0xdd,
	0x80, 0x91, 0x5b, 0xb0, 0x26, 0x19, 0x5b, 0xf6, 0xd0, 0x47, 0x97, 0x82, 0xb6, 0xad, 0x95, 0xe7,
	0x9b, 0xab, 0x32, 0xf8, 0x99, 0x8a, 0x91, 0x32, 0x5c, 0xeb, 0x53, 0xc1, 0x02, 0xd1, 0x62, 0xa2,
	0xd7, 0x6a, 0xf7, 0x79, 0xe7, 0x49, 0xe1, 0x0a, 0xea, 0xd6, 0xc3, 0xf8, 0x3d, 0xd1, 0xab, 0xcb,
	0x28, 0xd9, 0x83, 0x75, 0xcf, 0xe7, 0xf6, 0xb0, 0xc3, 0xfc, 0x56, 0x87, 0x0f, 0x5d, 0x51, 0x98,
	0x43, 0xdd, 0x5a, 0x14, 0x3d, 0x92, 0x41, 0x72, 0x1d, 0x16, 0x03, 0xcf, 0x77, 0x5c, 0x51, 0x98,
	0xc7, 0x65, 0xf5, 0x65, 0xdc, 0x85, 0x77, 0x47, 0x90, 0x0a, 0x9d, 0x6c, 0xc1, 0x8a, 0x87, 0xd0,
	0x2d, 0x71, 0xe2, 0x31, 0x04, 0x5c, 0x6e, 0x42, 0x18, 0xfa, 0xf2, 0xc4, 0x63, 0xc6, 0x9f, 0x5a,
	0x32, 0xe5, 0x38, 0xb5, 0xbd, 0xcc, 0xd4, 0x1a, 0xb9, 0x54, 0x72, 0x07, 0xe3, 0x92, 0x6b, 0xe4,
	0x2e, 0xa4, 0x57, 0xca, 0x4e, 0xaf, 0x91, 0x4b, 0x27, 0x58, 0x38, 0x9f, 0x60, 0x23, 0x17, 0xa5,
	0x58, 0x5f, 0x82, 0xc5, 0x10, 0xdd, 0xf8, 0x04, 0xae, 0x21, 0xf5, 0x63, 0x8f, 0xba, 0x51, 0xae,
	0x77, 0xe0, 0x2a, 0x32, 0x3b, 0x76, 0x48, 0x5b, 0x27, 0xff, 0xbf, 0xd9, 0x5a, 0x3f, 0xa1, 0x83,
	0xfe, 0x47, 0x86, 0x5a, 0x30, 0xa4, 0x15, 0x75, 0x1f, 0xd8, 0xc6, 0xc7, 0xea, 0xb6, 0x42, 0x03,
	0x95, 0x75, 0x19, 0xe6, 0xe5, 0x37, 0x6e, 0x5f, 0xa9, 0xe5, 0xcd, 0xb8, 0x86, 0xe5, 0xe5, 0x05,
	0x26, 0x6a, 0x51, 0x61, 0x7c, 0x03, 0xf9, 0x78, 0xfb, 0x43, 0x27, 0x10, 0x11, 0xc3, 0x3d, 0x00,
	0x8f, 0x76, 0x1d, 0x77, 0x74, 0x69, 0x2b, 0xb5, 0xbd, 0xb4, 0x8f, 0xba, 0xef, 0x48, 0xa6, 0xaa,
	0x2a, 0xb1, 0xd1, 0x38, 0x82, 0xf7, 0x53, 0xf6, 0x8a, 0xf0, 0x00, 0x16, 0x64, 0x2c, 0x28, 0x68,
	0xdb, 0x73, 0x63, 0x11, 0x43, 0x89, 0x51, 0x80, 0xeb, 0x68, 0xf2, 0x10, 0xdf, 0x21, 0x71, 0x53,
	0xc6, 0x11, 0xdc, 0xb8, 0xb0, 0x72, 0xe9, 0x2b, 0xb8, 0x09, 0x1b, 0x68, 0xf2, 0x39, 0x3b, 0x16,
	0x8f, 0xd4, 0x03, 0xc6, 0x2d, 0x63, 0x83, 0x9e, 0xb5, 0xa8, 0x0e, 0xb9, 0x0f, 0xeb, 0x2e, 0x3b,
	0x16, 0xad, 0xe8, 0xdd, 0xa3, 0x74, 0x36, 0xd2, 0xc7, 0x7d, 0x15, 0x75, 0x6f, 0x7d, 0xfe, 0xd5,
	0x9b, 0xad, 0x5c, 0x73, 0xcd, 0x4d, 0xfa, 0x19, 0x3a, 0x14, 0xe2, 0x53, 0x24, 0xd3, 0x63, 0xc6,
	0xec, 0x88, 0xe0, 0xd3, 0x04, 0xde, 0x68, 0x4d, 0x01, 0xec, 0x2a, 0x00, 0x2c, 0x8b, 0x80, 0x31,
	0x5b, 0x75, 0xc6, 0xaa, 0x9b, 0x50, 0x1b, 0x2f, 0x35, 0xb8, 0x19, 0xbe, 0x95, 0xcf, 0x3c, 0xea,
	0xb3, 0xc8, 0x2a, 0x7a, 0xec, 0x1b, 0xa9, 0x82, 0x8b, 0x8a, 0x4b, 0x76, 0x5d, 0x20, 0xa8, 0x2f,
	0xce, 0xb5, 0x3b, 0x60, 0x28, 0xec, 0x85, 0x0d, 0x58, 0xea, 0xf4, 0xa8, 0x83, 0x5b, 0xe7, 0xf0,
	0xe4, 0xab, 0xf8, 0xfd, 0xc0, 0x26, 0x3a, 0x2c, 0x79, 0x3e, 0xf7, 0x78, 0xc0, 0x7c, 0xac, 0xff,
	0xe5, 0x66, 0xfc, 0x6d, 0x34, 0x60, 0x33, 0x9b, 0xe7, 0xb2, 0x8f, 0x57, 0xfb, 0x6b, 0x19, 0x16,
	0xd0, 0x8a, 0x7c, 0xaf, 0xc1, 0x62, 0x58, 0x81, 0xa4, 0x6c, 0x66, 0x0d, 0x6d, 0xf3, 0xe2, 0x44,
	0xd4, 0xf7, 0x67, 0x50, 0x86, 0x4c, 0xc6, 0xee, 0x77, 0x7f, 0xff, 0xf7, 0xf3, 0x95, 0x22, 0xd9,
	0xb4, 0x32, 0x7f, 0x33, 0xc2, 0x7e, 0x26, 0x2f, 0x35, 0x58, 0xc0, 0x8d, 0xa4, 0x34, 0xcd, 0x3a,
	0x62, 0x28, 0x4f, 0x17, 0x2a, 0x84, 0x1a, 0x22, 0x54, 0xc8, 0xc1, 0x24, 0x04, 0xeb, 0x79, 0x62,
	0x50, 0xbe, 0x20, 0x3f, 0x6a, 0xb0, 0x14, 0x75, 0x1f, 0x39, 0x98, 0x70, 0x54, 0x6a, 0x02, 0xe8,
	0x77, 0x66, 0xd2, 0x2a, 0xb2, 0x12, 0x92, 0xed, 0x90, 0xad, 0x6c, 0x32, 0x59, 0x4e, 0xd5, 0xbe,
	0x24, 0xf8, 0x41, 0x0b, 0x9f, 0x96, 0xdc, 0x9e, 0x62, 0x1f, 0x61, 0x94, 0xa6, 0xea, 0x14, 0x42,
	0x05, 0x11, 0x6e, 0x93, 0xdd, 0xf1, 0x08, 0xd6, 0x73, 0x55, 0xe6, 0x2f, 0xc8, 0x2f, 0x1a, 0xc0,
	0x68, 0x6a, 0x90, 0xca, 0x84, 0x53, 0x2e, 0x8c, 0x1d, 0xbd, 0x3a, 0xa3, 0x5a, 0x91, 0xed, 0x23,
	0xd9, 0x2d, 0xb2, 0x93, 0x4d, 0x16, 0xfe, 0xbc, 0x54, 0x25, 0x1a, 0xf9, 0x5d, 0x83, 0xb5, 0x73,
	0xa3, 0x86, 0x58, 0x13, 0xce, 0xca, 0x9a, 0x58, 0xfa, 0x07, 0xb3, 0x6f, 0x50, 0x7c, 0x77, 0x91,
	0xcf, 0x24, 0x95, 0x31, 0x65, 0x15, 0x36, 0x69, 0x55, 0x8e, 0x94, 0x6a, 0x3c, 0xe9, 0xc8, 0x1f,
	0x1a, 0xbc, 0x93, 0xea, 0x5f, 0x72, 0x38, 0xa9, 0x94, 0x33, 0x67, 0x8f, 0x5e, 0xbb, 0xcc, 0x16,
	0x05, 0x6c, 0x21, 0xf0, 0x3e, 0x29, 0xcd, 0x00, 0x8c, 0xd7, 0xfa, 0xab, 0x06, 0xab, 0xc9, 0xf9,
	0x49, 0xcc, 0x29, 0x97, 0x94, 0x1a, 0xc2, 0xba, 0x35, 0xb3, 0x7e, 0xb6, 0x6a, 0x8c, 0xd1, 0xaa,
	0x72, 0x68, 0xd7, 0xef, 0xbf, 0x3a, 0x2d, 0x6a, 0xaf, 0x4f, 0x8b, 0xda, 0xbf, 0xa7, 0x45, 0xed,
	0xa7, 0xb3, 0x62, 0xee, 0xf5, 0x59, 0x31, 0xf7, 0xcf, 0x59, 0x31, 0xf7, 0x75, 0xa5, 0xeb, 0x88,
	0xde, 0xb0, 0x6d, 0x76, 0xf8, 0xc0, 0x1a, 0x50, 0xe1, 0x74, 0x5c, 0x26, 0xbe, 0xe5, 0xfe, 0x93,
	0x91, 0xed, 0x31, 0x1a, 0xe3, 0x60, 0x6c, 0x2f, 0xe2, 0x7f, 0x7f, 0x1f, 0xbe, 0x0d, 0x00, 0x00,
	0xff, 0xff, 0x99, 0x71, 0x86, 0x02, 0xd7, 0x0a, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	Param(ctx context.Context, in *QueryParamRequest, opts ...grpc.CallOption) (*QueryParamResponse, error)
	SpanList(ctx context.Context, in *QuerySpanListRequest, opts ...grpc.CallOption) (*QuerySpanListResponse, error)
	Span(ctx context.Context, in *QuerySpanRequest, opts ...grpc.CallOption) (*QuerySpanResponse, error)
	LatestSpan(ctx context.Context, in *QueryLatestSpanRequest, opts ...grpc.CallOption) (*QueryLatestSpanResponse, error)
	NextProducers(ctx context.Context, in *QueryNextProducersRequest, opts ...grpc.CallOption) (*QueryNextProducersResponse, error)
	PrepareNextSpan(ctx context.Context, in *QueryPrepareNextSpanRequest, opts ...grpc.CallOption) (*QueryPrepareNextSpanResponse, error)
	NextSpanSeed(ctx context.Context, in *QueryNextSpanSeedRequest, opts ...grpc.CallOption) (*QueryNextSpanSeedResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/heimdall.bor.v1beta1.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Param(ctx context.Context, in *QueryParamRequest, opts ...grpc.CallOption) (*QueryParamResponse, error) {
	out := new(QueryParamResponse)
	err := c.cc.Invoke(ctx, "/heimdall.bor.v1beta1.Query/Param", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) SpanList(ctx context.Context, in *QuerySpanListRequest, opts ...grpc.CallOption) (*QuerySpanListResponse, error) {
	out := new(QuerySpanListResponse)
	err := c.cc.Invoke(ctx, "/heimdall.bor.v1beta1.Query/SpanList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Span(ctx context.Context, in *QuerySpanRequest, opts ...grpc.CallOption) (*QuerySpanResponse, error) {
	out := new(QuerySpanResponse)
	err := c.cc.Invoke(ctx, "/heimdall.bor.v1beta1.Query/Span", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) LatestSpan(ctx context.Context, in *QueryLatestSpanRequest, opts ...grpc.CallOption) (*QueryLatestSpanResponse, error) {
	out := new(QueryLatestSpanResponse)
	err := c.cc.Invoke(ctx, "/heimdall.bor.v1beta1.Query/LatestSpan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) NextProducers(ctx context.Context, in *QueryNextProducersRequest, opts ...grpc.CallOption) (*QueryNextProducersResponse, error) {
	out := new(QueryNextProducersResponse)
	err := c.cc.Invoke(ctx, "/heimdall.bor.v1beta1.Query/NextProducers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) PrepareNextSpan(ctx context.Context, in *QueryPrepareNextSpanRequest, opts ...grpc.CallOption) (*QueryPrepareNextSpanResponse, error) {
	out := new(QueryPrepareNextSpanResponse)
	err := c.cc.Invoke(ctx, "/heimdall.bor.v1beta1.Query/PrepareNextSpan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) NextSpanSeed(ctx context.Context, in *QueryNextSpanSeedRequest, opts ...grpc.CallOption) (*QueryNextSpanSeedResponse, error) {
	out := new(QueryNextSpanSeedResponse)
	err := c.cc.Invoke(ctx, "/heimdall.bor.v1beta1.Query/NextSpanSeed", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	Param(context.Context, *QueryParamRequest) (*QueryParamResponse, error)
	SpanList(context.Context, *QuerySpanListRequest) (*QuerySpanListResponse, error)
	Span(context.Context, *QuerySpanRequest) (*QuerySpanResponse, error)
	LatestSpan(context.Context, *QueryLatestSpanRequest) (*QueryLatestSpanResponse, error)
	NextProducers(context.Context, *QueryNextProducersRequest) (*QueryNextProducersResponse, error)
	PrepareNextSpan(context.Context, *QueryPrepareNextSpanRequest) (*QueryPrepareNextSpanResponse, error)
	NextSpanSeed(context.Context, *QueryNextSpanSeedRequest) (*QueryNextSpanSeedResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) Param(ctx context.Context, req *QueryParamRequest) (*QueryParamResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Param not implemented")
}
func (*UnimplementedQueryServer) SpanList(ctx context.Context, req *QuerySpanListRequest) (*QuerySpanListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SpanList not implemented")
}
func (*UnimplementedQueryServer) Span(ctx context.Context, req *QuerySpanRequest) (*QuerySpanResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Span not implemented")
}
func (*UnimplementedQueryServer) LatestSpan(ctx context.Context, req *QueryLatestSpanRequest) (*QueryLatestSpanResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LatestSpan not implemented")
}
func (*UnimplementedQueryServer) NextProducers(ctx context.Context, req *QueryNextProducersRequest) (*QueryNextProducersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NextProducers not implemented")
}
func (*UnimplementedQueryServer) PrepareNextSpan(ctx context.Context, req *QueryPrepareNextSpanRequest) (*QueryPrepareNextSpanResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PrepareNextSpan not implemented")
}
func (*UnimplementedQueryServer) NextSpanSeed(ctx context.Context, req *QueryNextSpanSeedRequest) (*QueryNextSpanSeedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NextSpanSeed not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/heimdall.bor.v1beta1.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Param_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Param(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/heimdall.bor.v1beta1.Query/Param",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Param(ctx, req.(*QueryParamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_SpanList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuerySpanListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).SpanList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/heimdall.bor.v1beta1.Query/SpanList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).SpanList(ctx, req.(*QuerySpanListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Span_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuerySpanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Span(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/heimdall.bor.v1beta1.Query/Span",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Span(ctx, req.(*QuerySpanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_LatestSpan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryLatestSpanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).LatestSpan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/heimdall.bor.v1beta1.Query/LatestSpan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).LatestSpan(ctx, req.(*QueryLatestSpanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_NextProducers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryNextProducersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).NextProducers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/heimdall.bor.v1beta1.Query/NextProducers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).NextProducers(ctx, req.(*QueryNextProducersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_PrepareNextSpan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryPrepareNextSpanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).PrepareNextSpan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/heimdall.bor.v1beta1.Query/PrepareNextSpan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).PrepareNextSpan(ctx, req.(*QueryPrepareNextSpanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_NextSpanSeed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryNextSpanSeedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).NextSpanSeed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/heimdall.bor.v1beta1.Query/NextSpanSeed",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).NextSpanSeed(ctx, req.(*QueryNextSpanSeedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "heimdall.bor.v1beta1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "Param",
			Handler:    _Query_Param_Handler,
		},
		{
			MethodName: "SpanList",
			Handler:    _Query_SpanList_Handler,
		},
		{
			MethodName: "Span",
			Handler:    _Query_Span_Handler,
		},
		{
			MethodName: "LatestSpan",
			Handler:    _Query_LatestSpan_Handler,
		},
		{
			MethodName: "NextProducers",
			Handler:    _Query_NextProducers_Handler,
		},
		{
			MethodName: "PrepareNextSpan",
			Handler:    _Query_PrepareNextSpan_Handler,
		},
		{
			MethodName: "NextSpanSeed",
			Handler:    _Query_NextSpanSeed_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "heimdall/bor/v1beta1/query.proto",
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Sprint != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Sprint))
		i--
		dAtA[i] = 0x20
	}
	if m.ProducerCount != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.ProducerCount))
		i--
		dAtA[i] = 0x18
	}
	if m.LatestEthBlock != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.LatestEthBlock))
		i--
		dAtA[i] = 0x10
	}
	if m.SpanDuration != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.SpanDuration))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryParamRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ParamsType) > 0 {
		i -= len(m.ParamsType)
		copy(dAtA[i:], m.ParamsType)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ParamsType)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryParamResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Params != nil {
		{
			size := m.Params.Size()
			i -= size
			if _, err := m.Params.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryParamResponse_SpanDuration) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamResponse_SpanDuration) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i = encodeVarintQuery(dAtA, i, uint64(m.SpanDuration))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}
func (m *QueryParamResponse_LatestEthBlock) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamResponse_LatestEthBlock) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i = encodeVarintQuery(dAtA, i, uint64(m.LatestEthBlock))
	i--
	dAtA[i] = 0x10
	return len(dAtA) - i, nil
}
func (m *QueryParamResponse_ProducerCount) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamResponse_ProducerCount) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i = encodeVarintQuery(dAtA, i, uint64(m.ProducerCount))
	i--
	dAtA[i] = 0x18
	return len(dAtA) - i, nil
}
func (m *QueryParamResponse_Sprint) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamResponse_Sprint) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i = encodeVarintQuery(dAtA, i, uint64(m.Sprint))
	i--
	dAtA[i] = 0x20
	return len(dAtA) - i, nil
}
func (m *QuerySpanRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuerySpanRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuerySpanRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SpanId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.SpanId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QuerySpanResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuerySpanResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuerySpanResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Span != nil {
		{
			size, err := m.Span.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QuerySpanListRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuerySpanListRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuerySpanListRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QuerySpanListResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuerySpanListResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuerySpanListResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Spans) > 0 {
		for iNdEx := len(m.Spans) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Spans[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryLatestSpanRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLatestSpanRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLatestSpanRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryLatestSpanResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLatestSpanResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLatestSpanResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Span != nil {
		{
			size, err := m.Span.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryNextProducersRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryNextProducersRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryNextProducersRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryNextProducersResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryNextProducersResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryNextProducersResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.NextProducers) > 0 {
		for iNdEx := len(m.NextProducers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.NextProducers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryNextSpanSeedRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryNextSpanSeedRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryNextSpanSeedRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryNextSpanSeedResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryNextSpanSeedResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryNextSpanSeedResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.NextSpanSeed) > 0 {
		i -= len(m.NextSpanSeed)
		copy(dAtA[i:], m.NextSpanSeed)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.NextSpanSeed)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryPrepareNextSpanRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPrepareNextSpanRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPrepareNextSpanRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Proposer) > 0 {
		i -= len(m.Proposer)
		copy(dAtA[i:], m.Proposer)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Proposer)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ChainId) > 0 {
		i -= len(m.ChainId)
		copy(dAtA[i:], m.ChainId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ChainId)))
		i--
		dAtA[i] = 0x1a
	}
	if m.StartBlock != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.StartBlock))
		i--
		dAtA[i] = 0x10
	}
	if m.SpanId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.SpanId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryPrepareNextSpanResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPrepareNextSpanResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPrepareNextSpanResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Span != nil {
		{
			size, err := m.Span.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SpanDuration != 0 {
		n += 1 + sovQuery(uint64(m.SpanDuration))
	}
	if m.LatestEthBlock != 0 {
		n += 1 + sovQuery(uint64(m.LatestEthBlock))
	}
	if m.ProducerCount != 0 {
		n += 1 + sovQuery(uint64(m.ProducerCount))
	}
	if m.Sprint != 0 {
		n += 1 + sovQuery(uint64(m.Sprint))
	}
	return n
}

func (m *QueryParamRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ParamsType)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryParamResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Params != nil {
		n += m.Params.Size()
	}
	return n
}

func (m *QueryParamResponse_SpanDuration) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovQuery(uint64(m.SpanDuration))
	return n
}
func (m *QueryParamResponse_LatestEthBlock) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovQuery(uint64(m.LatestEthBlock))
	return n
}
func (m *QueryParamResponse_ProducerCount) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovQuery(uint64(m.ProducerCount))
	return n
}
func (m *QueryParamResponse_Sprint) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovQuery(uint64(m.Sprint))
	return n
}
func (m *QuerySpanRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SpanId != 0 {
		n += 1 + sovQuery(uint64(m.SpanId))
	}
	return n
}

func (m *QuerySpanResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Span != nil {
		l = m.Span.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QuerySpanListRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QuerySpanListResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Spans) > 0 {
		for _, e := range m.Spans {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryLatestSpanRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryLatestSpanResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Span != nil {
		l = m.Span.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryNextProducersRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryNextProducersResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.NextProducers) > 0 {
		for _, e := range m.NextProducers {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryNextSpanSeedRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryNextSpanSeedResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.NextSpanSeed)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryPrepareNextSpanRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SpanId != 0 {
		n += 1 + sovQuery(uint64(m.SpanId))
	}
	if m.StartBlock != 0 {
		n += 1 + sovQuery(uint64(m.StartBlock))
	}
	l = len(m.ChainId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Proposer)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryPrepareNextSpanResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Span != nil {
		l = m.Span.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpanDuration", wireType)
			}
			m.SpanDuration = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SpanDuration |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LatestEthBlock", wireType)
			}
			m.LatestEthBlock = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LatestEthBlock |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProducerCount", wireType)
			}
			m.ProducerCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProducerCount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sprint", wireType)
			}
			m.Sprint = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sprint |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParamsType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ParamsType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpanDuration", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Params = &QueryParamResponse_SpanDuration{v}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LatestEthBlock", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Params = &QueryParamResponse_LatestEthBlock{v}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProducerCount", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Params = &QueryParamResponse_ProducerCount{v}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sprint", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Params = &QueryParamResponse_Sprint{v}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuerySpanRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuerySpanRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuerySpanRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpanId", wireType)
			}
			m.SpanId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SpanId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuerySpanResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuerySpanResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuerySpanResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Span", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Span == nil {
				m.Span = &types.Span{}
			}
			if err := m.Span.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuerySpanListRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuerySpanListRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuerySpanListRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &types.QueryPaginationParams{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuerySpanListResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuerySpanListResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuerySpanListResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spans", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Spans = append(m.Spans, &types.Span{})
			if err := m.Spans[len(m.Spans)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLatestSpanRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLatestSpanRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLatestSpanRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLatestSpanResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLatestSpanResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLatestSpanResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Span", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Span == nil {
				m.Span = &types.Span{}
			}
			if err := m.Span.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryNextProducersRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryNextProducersRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryNextProducersRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryNextProducersResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryNextProducersResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryNextProducersResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextProducers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NextProducers = append(m.NextProducers, types.Validator{})
			if err := m.NextProducers[len(m.NextProducers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryNextSpanSeedRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryNextSpanSeedRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryNextSpanSeedRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryNextSpanSeedResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryNextSpanSeedResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryNextSpanSeedResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextSpanSeed", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NextSpanSeed = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPrepareNextSpanRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPrepareNextSpanRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPrepareNextSpanRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpanId", wireType)
			}
			m.SpanId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SpanId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartBlock", wireType)
			}
			m.StartBlock = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartBlock |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Proposer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Proposer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPrepareNextSpanResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPrepareNextSpanResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPrepareNextSpanResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Span", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Span == nil {
				m.Span = &types.Span{}
			}
			if err := m.Span.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
