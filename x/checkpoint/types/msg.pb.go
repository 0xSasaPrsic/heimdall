// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: checkpoint/v1beta/msg.proto

package types

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type MsgCheckpoint struct {
	Proposer        string `protobuf:"bytes,1,opt,name=proposer,proto3" json:"proposer,omitempty"`
	StartBlock      uint64 `protobuf:"varint,2,opt,name=start_block,json=startBlock,proto3" json:"start_block,omitempty"`
	EndBlock        uint64 `protobuf:"varint,3,opt,name=end_block,json=endBlock,proto3" json:"end_block,omitempty"`
	Roothash        []byte `protobuf:"bytes,4,opt,name=roothash,proto3" json:"roothash,omitempty"`
	AccountRootHash []byte `protobuf:"bytes,5,opt,name=account_root_hash,json=accountRootHash,proto3" json:"account_root_hash,omitempty"`
	BorChainID      string `protobuf:"bytes,6,opt,name=bor_chainID,json=borChainID,proto3" json:"bor_chainID,omitempty"`
}

func (m *MsgCheckpoint) Reset()         { *m = MsgCheckpoint{} }
func (m *MsgCheckpoint) String() string { return proto.CompactTextString(m) }
func (*MsgCheckpoint) ProtoMessage()    {}
func (*MsgCheckpoint) Descriptor() ([]byte, []int) {
	return fileDescriptor_54f8314581ee9560, []int{0}
}
func (m *MsgCheckpoint) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCheckpoint) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCheckpoint.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCheckpoint) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCheckpoint.Merge(m, src)
}
func (m *MsgCheckpoint) XXX_Size() int {
	return m.Size()
}
func (m *MsgCheckpoint) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCheckpoint.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCheckpoint proto.InternalMessageInfo

type MsgCheckpointAck struct {
	From            string `protobuf:"bytes,1,opt,name=from,proto3" json:"from,omitempty"`
	Number          uint64 `protobuf:"varint,2,opt,name=number,proto3" json:"number,omitempty"`
	Proposer        string `protobuf:"bytes,3,opt,name=proposer,proto3" json:"proposer,omitempty"`
	StartBlock      uint64 `protobuf:"varint,4,opt,name=start_block,json=startBlock,proto3" json:"start_block,omitempty"`
	EndBlock        uint64 `protobuf:"varint,5,opt,name=end_block,json=endBlock,proto3" json:"end_block,omitempty"`
	Roothash        []byte `protobuf:"bytes,6,opt,name=roothash,proto3" json:"roothash,omitempty"`
	AccountRootHash []byte `protobuf:"bytes,7,opt,name=account_root_hash,json=accountRootHash,proto3" json:"account_root_hash,omitempty"`
	BorChainID      uint64 `protobuf:"varint,8,opt,name=bor_chainID,json=borChainID,proto3" json:"bor_chainID,omitempty"`
}

func (m *MsgCheckpointAck) Reset()         { *m = MsgCheckpointAck{} }
func (m *MsgCheckpointAck) String() string { return proto.CompactTextString(m) }
func (*MsgCheckpointAck) ProtoMessage()    {}
func (*MsgCheckpointAck) Descriptor() ([]byte, []int) {
	return fileDescriptor_54f8314581ee9560, []int{1}
}
func (m *MsgCheckpointAck) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCheckpointAck) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCheckpointAck.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCheckpointAck) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCheckpointAck.Merge(m, src)
}
func (m *MsgCheckpointAck) XXX_Size() int {
	return m.Size()
}
func (m *MsgCheckpointAck) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCheckpointAck.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCheckpointAck proto.InternalMessageInfo

type MsgCheckpointNoAck struct {
	From string `protobuf:"bytes,1,opt,name=from,proto3" json:"from,omitempty"`
}

func (m *MsgCheckpointNoAck) Reset()         { *m = MsgCheckpointNoAck{} }
func (m *MsgCheckpointNoAck) String() string { return proto.CompactTextString(m) }
func (*MsgCheckpointNoAck) ProtoMessage()    {}
func (*MsgCheckpointNoAck) Descriptor() ([]byte, []int) {
	return fileDescriptor_54f8314581ee9560, []int{2}
}
func (m *MsgCheckpointNoAck) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCheckpointNoAck) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCheckpointNoAck.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCheckpointNoAck) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCheckpointNoAck.Merge(m, src)
}
func (m *MsgCheckpointNoAck) XXX_Size() int {
	return m.Size()
}
func (m *MsgCheckpointNoAck) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCheckpointNoAck.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCheckpointNoAck proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgCheckpoint)(nil), "heimdall.checkpoint.v1beta1.MsgCheckpoint")
	proto.RegisterType((*MsgCheckpointAck)(nil), "heimdall.checkpoint.v1beta1.MsgCheckpointAck")
	proto.RegisterType((*MsgCheckpointNoAck)(nil), "heimdall.checkpoint.v1beta1.MsgCheckpointNoAck")
}

func init() { proto.RegisterFile("checkpoint/v1beta/msg.proto", fileDescriptor_54f8314581ee9560) }

var fileDescriptor_54f8314581ee9560 = []byte{
	// 386 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x92, 0xbf, 0x8e, 0xda, 0x40,
	0x10, 0xc6, 0xbd, 0x60, 0x1c, 0xb3, 0x24, 0x4a, 0xb2, 0x8a, 0x22, 0x0b, 0x24, 0x1b, 0x51, 0xa1,
	0x14, 0xb6, 0x08, 0x5d, 0xba, 0x40, 0x8a, 0xa4, 0x20, 0x85, 0xcb, 0x34, 0x96, 0xbd, 0x6c, 0x6c,
	0xcb, 0xd8, 0x63, 0xad, 0x97, 0xfb, 0xf3, 0x06, 0x27, 0x5d, 0x73, 0x8f, 0xc0, 0xe3, 0x5c, 0x49,
	0x79, 0xc5, 0x15, 0x27, 0x68, 0xee, 0x31, 0x4e, 0x5e, 0xfb, 0xe0, 0x90, 0xee, 0x10, 0xdd, 0xcc,
	0xf7, 0x7d, 0x23, 0xcd, 0xfc, 0x34, 0xb8, 0x47, 0x23, 0x46, 0x93, 0x1c, 0xe2, 0x4c, 0x38, 0x67,
	0xa3, 0x80, 0x09, 0xdf, 0x49, 0x8b, 0xd0, 0xce, 0x39, 0x08, 0x20, 0xbd, 0x88, 0xc5, 0xe9, 0xdc,
	0x5f, 0x2c, 0xec, 0x7d, 0xca, 0xae, 0x52, 0xa3, 0xee, 0x97, 0x10, 0x42, 0x90, 0x39, 0xa7, 0xac,
	0xaa, 0x91, 0xc1, 0x3d, 0xc2, 0x1f, 0x66, 0x45, 0x38, 0xdd, 0xe5, 0x49, 0x17, 0xeb, 0x39, 0x87,
	0x1c, 0x0a, 0xc6, 0x0d, 0xd4, 0x47, 0xc3, 0xb6, 0xbb, 0xeb, 0x89, 0x85, 0x3b, 0x85, 0xf0, 0xb9,
	0xf0, 0x82, 0x05, 0xd0, 0xc4, 0x68, 0xf4, 0xd1, 0x50, 0x75, 0xb1, 0x94, 0x26, 0xa5, 0x42, 0x7a,
	0xb8, 0xcd, 0xb2, 0x79, 0x6d, 0x37, 0xa5, 0xad, 0xb3, 0x6c, 0x5e, 0x99, 0x5d, 0xac, 0x73, 0x00,
	0x11, 0xf9, 0x45, 0x64, 0xa8, 0x7d, 0x34, 0x7c, 0xef, 0xee, 0x7a, 0xf2, 0x0d, 0x7f, 0xf6, 0x29,
	0x85, 0x65, 0x26, 0xbc, 0x52, 0xf3, 0x64, 0xa8, 0x25, 0x43, 0x1f, 0x6b, 0xc3, 0x05, 0x10, 0xbf,
	0xcb, 0xac, 0x85, 0x3b, 0x01, 0x70, 0x8f, 0x46, 0x7e, 0x9c, 0xfd, 0xf9, 0x65, 0x68, 0x72, 0x49,
	0x1c, 0x00, 0x9f, 0x56, 0xca, 0x0f, 0xfd, 0x6a, 0x65, 0x29, 0x8f, 0x2b, 0x4b, 0x19, 0x5c, 0x37,
	0xf0, 0xa7, 0x83, 0xf3, 0x7e, 0xd2, 0x84, 0x10, 0xac, 0xfe, 0xe7, 0x90, 0xd6, 0xd7, 0xc9, 0x9a,
	0x7c, 0xc5, 0x5a, 0xb6, 0x4c, 0x03, 0xc6, 0xeb, 0xa3, 0xea, 0xee, 0x80, 0x46, 0xf3, 0x38, 0x0d,
	0xf5, 0x38, 0x8d, 0xd6, 0x11, 0x1a, 0xda, 0x29, 0x34, 0xde, 0x9d, 0x44, 0x43, 0xaf, 0xb6, 0x78,
	0x95, 0xc6, 0x77, 0x4c, 0x0e, 0x60, 0xfc, 0x85, 0x37, 0x70, 0xec, 0x67, 0x26, 0xb3, 0xdb, 0x8d,
	0x89, 0xd6, 0x1b, 0x13, 0x3d, 0x6c, 0x4c, 0x74, 0xb3, 0x35, 0x95, 0xf5, 0xd6, 0x54, 0xee, 0xb6,
	0xa6, 0xf2, 0x6f, 0x1c, 0xc6, 0x22, 0x5a, 0x06, 0x36, 0x85, 0xd4, 0x49, 0x7d, 0x11, 0xd3, 0x8c,
	0x89, 0x73, 0xe0, 0x89, 0xf3, 0xfc, 0x85, 0xce, 0x85, 0xf3, 0xe2, 0x5b, 0xc5, 0x65, 0xce, 0x8a,
	0x40, 0x93, 0x6f, 0x37, 0x7e, 0x0a, 0x00, 0x00, 0xff, 0xff, 0x1f, 0x54, 0xf4, 0xb3, 0xc8, 0x02,
	0x00, 0x00,
}

func (m *MsgCheckpoint) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCheckpoint) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCheckpoint) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.BorChainID) > 0 {
		i -= len(m.BorChainID)
		copy(dAtA[i:], m.BorChainID)
		i = encodeVarintMsg(dAtA, i, uint64(len(m.BorChainID)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.AccountRootHash) > 0 {
		i -= len(m.AccountRootHash)
		copy(dAtA[i:], m.AccountRootHash)
		i = encodeVarintMsg(dAtA, i, uint64(len(m.AccountRootHash)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Roothash) > 0 {
		i -= len(m.Roothash)
		copy(dAtA[i:], m.Roothash)
		i = encodeVarintMsg(dAtA, i, uint64(len(m.Roothash)))
		i--
		dAtA[i] = 0x22
	}
	if m.EndBlock != 0 {
		i = encodeVarintMsg(dAtA, i, uint64(m.EndBlock))
		i--
		dAtA[i] = 0x18
	}
	if m.StartBlock != 0 {
		i = encodeVarintMsg(dAtA, i, uint64(m.StartBlock))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Proposer) > 0 {
		i -= len(m.Proposer)
		copy(dAtA[i:], m.Proposer)
		i = encodeVarintMsg(dAtA, i, uint64(len(m.Proposer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCheckpointAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCheckpointAck) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCheckpointAck) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BorChainID != 0 {
		i = encodeVarintMsg(dAtA, i, uint64(m.BorChainID))
		i--
		dAtA[i] = 0x40
	}
	if len(m.AccountRootHash) > 0 {
		i -= len(m.AccountRootHash)
		copy(dAtA[i:], m.AccountRootHash)
		i = encodeVarintMsg(dAtA, i, uint64(len(m.AccountRootHash)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Roothash) > 0 {
		i -= len(m.Roothash)
		copy(dAtA[i:], m.Roothash)
		i = encodeVarintMsg(dAtA, i, uint64(len(m.Roothash)))
		i--
		dAtA[i] = 0x32
	}
	if m.EndBlock != 0 {
		i = encodeVarintMsg(dAtA, i, uint64(m.EndBlock))
		i--
		dAtA[i] = 0x28
	}
	if m.StartBlock != 0 {
		i = encodeVarintMsg(dAtA, i, uint64(m.StartBlock))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Proposer) > 0 {
		i -= len(m.Proposer)
		copy(dAtA[i:], m.Proposer)
		i = encodeVarintMsg(dAtA, i, uint64(len(m.Proposer)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Number != 0 {
		i = encodeVarintMsg(dAtA, i, uint64(m.Number))
		i--
		dAtA[i] = 0x10
	}
	if len(m.From) > 0 {
		i -= len(m.From)
		copy(dAtA[i:], m.From)
		i = encodeVarintMsg(dAtA, i, uint64(len(m.From)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCheckpointNoAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCheckpointNoAck) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCheckpointNoAck) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.From) > 0 {
		i -= len(m.From)
		copy(dAtA[i:], m.From)
		i = encodeVarintMsg(dAtA, i, uint64(len(m.From)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintMsg(dAtA []byte, offset int, v uint64) int {
	offset -= sovMsg(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgCheckpoint) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Proposer)
	if l > 0 {
		n += 1 + l + sovMsg(uint64(l))
	}
	if m.StartBlock != 0 {
		n += 1 + sovMsg(uint64(m.StartBlock))
	}
	if m.EndBlock != 0 {
		n += 1 + sovMsg(uint64(m.EndBlock))
	}
	l = len(m.Roothash)
	if l > 0 {
		n += 1 + l + sovMsg(uint64(l))
	}
	l = len(m.AccountRootHash)
	if l > 0 {
		n += 1 + l + sovMsg(uint64(l))
	}
	l = len(m.BorChainID)
	if l > 0 {
		n += 1 + l + sovMsg(uint64(l))
	}
	return n
}

func (m *MsgCheckpointAck) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.From)
	if l > 0 {
		n += 1 + l + sovMsg(uint64(l))
	}
	if m.Number != 0 {
		n += 1 + sovMsg(uint64(m.Number))
	}
	l = len(m.Proposer)
	if l > 0 {
		n += 1 + l + sovMsg(uint64(l))
	}
	if m.StartBlock != 0 {
		n += 1 + sovMsg(uint64(m.StartBlock))
	}
	if m.EndBlock != 0 {
		n += 1 + sovMsg(uint64(m.EndBlock))
	}
	l = len(m.Roothash)
	if l > 0 {
		n += 1 + l + sovMsg(uint64(l))
	}
	l = len(m.AccountRootHash)
	if l > 0 {
		n += 1 + l + sovMsg(uint64(l))
	}
	if m.BorChainID != 0 {
		n += 1 + sovMsg(uint64(m.BorChainID))
	}
	return n
}

func (m *MsgCheckpointNoAck) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.From)
	if l > 0 {
		n += 1 + l + sovMsg(uint64(l))
	}
	return n
}

func sovMsg(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMsg(x uint64) (n int) {
	return sovMsg(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgCheckpoint) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCheckpoint: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCheckpoint: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Proposer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsg
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Proposer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartBlock", wireType)
			}
			m.StartBlock = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartBlock |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndBlock", wireType)
			}
			m.EndBlock = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EndBlock |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Roothash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMsg
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Roothash = append(m.Roothash[:0], dAtA[iNdEx:postIndex]...)
			if m.Roothash == nil {
				m.Roothash = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountRootHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMsg
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AccountRootHash = append(m.AccountRootHash[:0], dAtA[iNdEx:postIndex]...)
			if m.AccountRootHash == nil {
				m.AccountRootHash = []byte{}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BorChainID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsg
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BorChainID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMsg
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCheckpointAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCheckpointAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCheckpointAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsg
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.From = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Number", wireType)
			}
			m.Number = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Number |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Proposer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsg
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Proposer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartBlock", wireType)
			}
			m.StartBlock = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartBlock |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndBlock", wireType)
			}
			m.EndBlock = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EndBlock |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Roothash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMsg
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Roothash = append(m.Roothash[:0], dAtA[iNdEx:postIndex]...)
			if m.Roothash == nil {
				m.Roothash = []byte{}
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountRootHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMsg
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AccountRootHash = append(m.AccountRootHash[:0], dAtA[iNdEx:postIndex]...)
			if m.AccountRootHash == nil {
				m.AccountRootHash = []byte{}
			}
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BorChainID", wireType)
			}
			m.BorChainID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BorChainID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMsg
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCheckpointNoAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCheckpointNoAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCheckpointNoAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsg
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.From = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMsg
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMsg(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMsg
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMsg
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMsg
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMsg
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMsg        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMsg          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMsg = fmt.Errorf("proto: unexpected end of group")
)
