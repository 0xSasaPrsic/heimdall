// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: clerk/v1beta/querier.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryRecordParams is request type for the Query/Record RPC method
type QueryRecordParams struct {
	RecordId uint64 `protobuf:"varint,1,opt,name=record_id,json=recordId,proto3" json:"record_id,omitempty"`
}

func (m *QueryRecordParams) Reset()         { *m = QueryRecordParams{} }
func (m *QueryRecordParams) String() string { return proto.CompactTextString(m) }
func (*QueryRecordParams) ProtoMessage()    {}
func (*QueryRecordParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_0edd4da80d366be5, []int{0}
}
func (m *QueryRecordParams) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_QueryRecordParams.Unmarshal(m, b)
}
func (m *QueryRecordParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_QueryRecordParams.Marshal(b, m, deterministic)
}
func (m *QueryRecordParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryRecordParams.Merge(m, src)
}
func (m *QueryRecordParams) XXX_Size() int {
	return xxx_messageInfo_QueryRecordParams.Size(m)
}
func (m *QueryRecordParams) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryRecordParams.DiscardUnknown(m)
}

var xxx_messageInfo_QueryRecordParams proto.InternalMessageInfo

func (m *QueryRecordParams) GetRecordId() uint64 {
	if m != nil {
		return m.RecordId
	}
	return 0
}

// QueryRecordResponse is response type for the Query/Record RPC method
type QueryRecordResponse struct {
	EventRecord *EventRecord `protobuf:"bytes,1,opt,name=event_record,json=eventRecord,proto3" json:"event_record,omitempty"`
}

func (m *QueryRecordResponse) Reset()         { *m = QueryRecordResponse{} }
func (m *QueryRecordResponse) String() string { return proto.CompactTextString(m) }
func (*QueryRecordResponse) ProtoMessage()    {}
func (*QueryRecordResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0edd4da80d366be5, []int{1}
}
func (m *QueryRecordResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_QueryRecordResponse.Unmarshal(m, b)
}
func (m *QueryRecordResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_QueryRecordResponse.Marshal(b, m, deterministic)
}
func (m *QueryRecordResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryRecordResponse.Merge(m, src)
}
func (m *QueryRecordResponse) XXX_Size() int {
	return xxx_messageInfo_QueryRecordResponse.Size(m)
}
func (m *QueryRecordResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryRecordResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryRecordResponse proto.InternalMessageInfo

func (m *QueryRecordResponse) GetEventRecord() *EventRecord {
	if m != nil {
		return m.EventRecord
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryRecordParams)(nil), "heimdall.clerk.v1beta1.QueryRecordParams")
	proto.RegisterType((*QueryRecordResponse)(nil), "heimdall.clerk.v1beta1.QueryRecordResponse")
}

func init() { proto.RegisterFile("clerk/v1beta/querier.proto", fileDescriptor_0edd4da80d366be5) }

var fileDescriptor_0edd4da80d366be5 = []byte{
	// 318 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x90, 0xc1, 0x4a, 0xc3, 0x40,
	0x10, 0x86, 0x13, 0xd1, 0xa2, 0x5b, 0x2f, 0x46, 0x91, 0x92, 0x6a, 0x90, 0xf6, 0xa2, 0x08, 0xbb,
	0xb6, 0xbe, 0x81, 0xa0, 0xe8, 0x4d, 0x7b, 0x14, 0xa4, 0x6c, 0x93, 0x21, 0x5d, 0x9a, 0xec, 0xc4,
	0xcd, 0xb6, 0x5a, 0xc4, 0x8b, 0xe0, 0x59, 0xc1, 0x97, 0xf2, 0x58, 0xf0, 0xe2, 0x51, 0x5a, 0x1f,
	0x44, 0xba, 0xdb, 0x5a, 0x45, 0x05, 0x6f, 0x33, 0xff, 0xfc, 0xff, 0xc7, 0xcc, 0x10, 0x3f, 0x4c,
	0x40, 0x75, 0x58, 0xaf, 0xd6, 0x02, 0xcd, 0xd9, 0x65, 0x17, 0x94, 0x00, 0x45, 0x33, 0x85, 0x1a,
	0xbd, 0xf5, 0x36, 0x88, 0x34, 0xe2, 0x49, 0x42, 0x8d, 0x89, 0x5a, 0x53, 0xcd, 0xdf, 0x88, 0x11,
	0xe3, 0x04, 0x18, 0xcf, 0x04, 0xe3, 0x52, 0xa2, 0xe6, 0x5a, 0xa0, 0xcc, 0x6d, 0xca, 0x2f, 0x7d,
	0x23, 0xda, 0xa4, 0x9d, 0xac, 0xc5, 0x18, 0xa3, 0x29, 0xd9, 0xb8, 0xb2, 0x6a, 0x65, 0x8f, 0xac,
	0x9c, 0x75, 0x41, 0xf5, 0x1b, 0x10, 0xa2, 0x8a, 0x4e, 0xb9, 0xe2, 0x69, 0xee, 0x95, 0xc9, 0x92,
	0x32, 0x7d, 0x53, 0x44, 0x25, 0x77, 0xcb, 0xdd, 0x9e, 0x6f, 0x2c, 0x5a, 0xe1, 0x24, 0xaa, 0x5c,
	0x90, 0xd5, 0x2f, 0x89, 0x06, 0xe4, 0x19, 0xca, 0x1c, 0xbc, 0x23, 0xb2, 0x0c, 0x3d, 0x90, 0xba,
	0x69, 0x8d, 0x26, 0x56, 0xac, 0x57, 0xe9, 0xef, 0x57, 0xd0, 0xc3, 0xb1, 0x77, 0x82, 0x28, 0xc2,
	0xac, 0xa9, 0x3f, 0xb8, 0x64, 0xc1, 0xf0, 0xbd, 0x7b, 0x97, 0x14, 0xac, 0xe8, 0xed, 0xfc, 0x85,
	0xf9, 0xb1, 0xbb, 0xbf, 0xfb, 0x0f, 0xeb, 0x74, 0xe9, 0x4a, 0xf5, 0xee, 0xe5, 0xfd, 0x69, 0x6e,
	0xd3, 0x2b, 0xb3, 0x69, 0xc8, 0xbe, 0x8c, 0xdd, 0x7c, 0xde, 0x7f, 0x7b, 0x70, 0xfc, 0x3c, 0x0c,
	0x9c, 0xc1, 0x30, 0x70, 0xde, 0x86, 0x81, 0xfb, 0x38, 0x0a, 0x9c, 0xc1, 0x28, 0x70, 0x5e, 0x47,
	0x81, 0x73, 0x4e, 0x63, 0xa1, 0xdb, 0xdd, 0x16, 0x0d, 0x31, 0x65, 0x29, 0xd7, 0x22, 0x94, 0xa0,
	0xaf, 0x50, 0x75, 0x66, 0xb4, 0xeb, 0x09, 0x4f, 0xf7, 0x33, 0xc8, 0x5b, 0x05, 0xf3, 0xf3, 0xfd,
	0x8f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x14, 0x36, 0x0e, 0x43, 0xf7, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Record queries the record that match by record id.
	Record(ctx context.Context, in *QueryRecordParams, opts ...grpc.CallOption) (*QueryRecordResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Record(ctx context.Context, in *QueryRecordParams, opts ...grpc.CallOption) (*QueryRecordResponse, error) {
	out := new(QueryRecordResponse)
	err := c.cc.Invoke(ctx, "/heimdall.clerk.v1beta1.Query/Record", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Record queries the record that match by record id.
	Record(context.Context, *QueryRecordParams) (*QueryRecordResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Record(ctx context.Context, req *QueryRecordParams) (*QueryRecordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Record not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Record_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRecordParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Record(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/heimdall.clerk.v1beta1.Query/Record",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Record(ctx, req.(*QueryRecordParams))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "heimdall.clerk.v1beta1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Record",
			Handler:    _Query_Record_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "clerk/v1beta/querier.proto",
}

func (m *QueryRecordParams) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RecordId != 0 {
		n += 1 + sovQuerier(uint64(m.RecordId))
	}
	return n
}

func (m *QueryRecordResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EventRecord != nil {
		l = m.EventRecord.Size()
		n += 1 + l + sovQuerier(uint64(l))
	}
	return n
}

func sovQuerier(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuerier(x uint64) (n int) {
	return sovQuerier(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
