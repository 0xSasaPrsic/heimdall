// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: clerk/v1beta/clerk.proto

package types

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	github_com_maticnetwork_heimdall_types_common "github.com/maticnetwork/heimdall/types/common"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type EventRecord struct {
	Id         uint64                                                     `protobuf:"varint,1,opt,name=id,proto3" json:"id" yaml:"id"`
	Contract   github_com_cosmos_cosmos_sdk_types.AccAddress              `protobuf:"bytes,2,opt,name=contract,proto3,casttype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"contract,omitempty"`
	Data       []byte                                                     `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	RecordTime time.Time                                                  `protobuf:"bytes,4,opt,name=record_time,json=recordTime,proto3,stdtime" json:"record_time" yaml:"record_time"`
	LogIndex   uint64                                                     `protobuf:"varint,5,opt,name=log_index,json=logIndex,proto3" json:"log_index,omitempty"`
	TxHash     github_com_maticnetwork_heimdall_types_common.HeimdallHash `protobuf:"bytes,6,opt,name=tx_hash,json=txHash,proto3,casttype=github.com/maticnetwork/heimdall/types/common.HeimdallHash" json:"tx_hash,omitempty"`
	ChainId    string                                                     `protobuf:"bytes,7,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
}

func (m *EventRecord) Reset()         { *m = EventRecord{} }
func (m *EventRecord) String() string { return proto.CompactTextString(m) }
func (*EventRecord) ProtoMessage()    {}
func (*EventRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_1edb6cdcc8eb1288, []int{0}
}
func (m *EventRecord) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EventRecord.Unmarshal(m, b)
}
func (m *EventRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EventRecord.Marshal(b, m, deterministic)
}
func (m *EventRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventRecord.Merge(m, src)
}
func (m *EventRecord) XXX_Size() int {
	return xxx_messageInfo_EventRecord.Size(m)
}
func (m *EventRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_EventRecord.DiscardUnknown(m)
}

var xxx_messageInfo_EventRecord proto.InternalMessageInfo

func init() {
	proto.RegisterType((*EventRecord)(nil), "heimdall.clerk.v1beta1.EventRecord")
}

func init() { proto.RegisterFile("clerk/v1beta/clerk.proto", fileDescriptor_1edb6cdcc8eb1288) }

var fileDescriptor_1edb6cdcc8eb1288 = []byte{
	// 430 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x92, 0xbf, 0x8e, 0xd3, 0x40,
	0x10, 0xc6, 0xed, 0x5c, 0xc8, 0x9f, 0x0d, 0xd5, 0x82, 0x90, 0x09, 0x92, 0x37, 0x0a, 0x4d, 0x9a,
	0xdb, 0x55, 0xa0, 0x4b, 0x81, 0x74, 0x91, 0x90, 0x72, 0x05, 0x8d, 0x85, 0x84, 0x04, 0x45, 0xb4,
	0xd9, 0x5d, 0xec, 0x55, 0xbc, 0x9e, 0xc8, 0xbb, 0x77, 0xe4, 0xde, 0x00, 0xba, 0x7b, 0x04, 0x1e,
	0xe7, 0xca, 0x2b, 0xa9, 0x0c, 0x4a, 0x3a, 0xca, 0x2b, 0xaf, 0x42, 0xf6, 0x5e, 0x50, 0xba, 0xab,
	0x66, 0xbe, 0xd1, 0x37, 0xe3, 0xef, 0x67, 0x1b, 0x45, 0x22, 0x57, 0xe5, 0x9a, 0x5d, 0x4e, 0x57,
	0xca, 0x71, 0xd6, 0x08, 0xba, 0x29, 0xc1, 0x01, 0x7e, 0x91, 0x29, 0x6d, 0x24, 0xcf, 0x73, 0xea,
	0xa7, 0xde, 0x32, 0x1d, 0x3e, 0x4f, 0x21, 0x85, 0xc6, 0xc2, 0xea, 0xce, 0xbb, 0x87, 0x24, 0x05,
	0x48, 0x73, 0xc5, 0x1a, 0xb5, 0xba, 0xf8, 0xca, 0x9c, 0x36, 0xca, 0x3a, 0x6e, 0x36, 0xde, 0x30,
	0xfe, 0x71, 0x82, 0x06, 0xef, 0x2f, 0x55, 0xe1, 0x12, 0x25, 0xa0, 0x94, 0xf8, 0x35, 0x6a, 0x69,
	0x19, 0x85, 0xa3, 0x70, 0xd2, 0x9e, 0x3f, 0xfb, 0x5b, 0x91, 0x96, 0x96, 0x77, 0x15, 0xe9, 0x5f,
	0x71, 0x93, 0xcf, 0xc6, 0x5a, 0x8e, 0x93, 0x96, 0x96, 0xf8, 0x03, 0xea, 0x09, 0x28, 0x5c, 0xc9,
	0x85, 0x8b, 0x5a, 0xa3, 0x70, 0xd2, 0x9f, 0x4f, 0xef, 0x2b, 0x72, 0x9a, 0x6a, 0x97, 0x5d, 0xac,
	0xa8, 0x00, 0xc3, 0x04, 0x58, 0x03, 0xf6, 0xa1, 0x9c, 0x5a, 0xb9, 0x66, 0xee, 0x6a, 0xa3, 0x2c,
	0x3d, 0x13, 0xe2, 0x4c, 0xca, 0x52, 0x59, 0x9b, 0xfc, 0x3f, 0x81, 0x31, 0x6a, 0x4b, 0xee, 0x78,
	0x74, 0x32, 0x0a, 0x27, 0x4f, 0x93, 0xa6, 0xc7, 0x5f, 0xd0, 0xa0, 0x6c, 0x12, 0x2d, 0xeb, 0xc4,
	0x51, 0x7b, 0x14, 0x4e, 0x06, 0x6f, 0x86, 0xd4, 0xe3, 0xd0, 0x03, 0x0e, 0xfd, 0x78, 0xc0, 0x99,
	0xc7, 0x37, 0x15, 0x09, 0xee, 0x2a, 0x82, 0x7d, 0xd4, 0xa3, 0xe5, 0xf1, 0xf5, 0x6f, 0x12, 0x26,
	0xc8, 0x4f, 0xea, 0x05, 0xfc, 0x0a, 0xf5, 0x73, 0x48, 0x97, 0xba, 0x90, 0x6a, 0x1b, 0x3d, 0xa9,
	0x59, 0x93, 0x5e, 0x0e, 0xe9, 0x79, 0xad, 0xf1, 0x27, 0xd4, 0x75, 0xdb, 0x65, 0xc6, 0x6d, 0x16,
	0x75, 0x1a, 0xb6, 0x77, 0xf7, 0x15, 0x99, 0x1d, 0xb1, 0x19, 0xee, 0xb4, 0x28, 0x94, 0xfb, 0x06,
	0xe5, 0x9a, 0x1d, 0xbe, 0x86, 0xe7, 0x63, 0x02, 0x8c, 0x81, 0x82, 0x2e, 0x1e, 0xa6, 0x0b, 0x6e,
	0xb3, 0xa4, 0xe3, 0xb6, 0x75, 0xc5, 0x2f, 0x51, 0x4f, 0x64, 0x5c, 0x17, 0x4b, 0x2d, 0xa3, 0x6e,
	0x7d, 0x39, 0xe9, 0x36, 0xfa, 0x5c, 0xce, 0xda, 0xdf, 0x7f, 0x92, 0x60, 0xbe, 0xb8, 0xd9, 0xc5,
	0xc1, 0xed, 0x2e, 0x0e, 0xfe, 0xec, 0xe2, 0xf0, 0x7a, 0x1f, 0x07, 0xb7, 0xfb, 0x38, 0xf8, 0xb5,
	0x8f, 0x83, 0xcf, 0xf4, 0xd1, 0xc7, 0x6f, 0xfd, 0x4f, 0xe2, 0x63, 0xac, 0x3a, 0xcd, 0x0b, 0x7a,
	0xfb, 0x2f, 0x00, 0x00, 0xff, 0xff, 0x59, 0x2b, 0x5d, 0x30, 0x47, 0x02, 0x00, 0x00,
}

func (m *EventRecord) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovClerk(uint64(m.Id))
	}
	l = len(m.Contract)
	if l > 0 {
		n += 1 + l + sovClerk(uint64(l))
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovClerk(uint64(l))
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.RecordTime)
	n += 1 + l + sovClerk(uint64(l))
	if m.LogIndex != 0 {
		n += 1 + sovClerk(uint64(m.LogIndex))
	}
	l = len(m.TxHash)
	if l > 0 {
		n += 1 + l + sovClerk(uint64(l))
	}
	l = len(m.ChainId)
	if l > 0 {
		n += 1 + l + sovClerk(uint64(l))
	}
	return n
}

func sovClerk(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozClerk(x uint64) (n int) {
	return sovClerk(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
