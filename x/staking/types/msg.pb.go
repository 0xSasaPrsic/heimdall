// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: staking/v1beta/msg.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-sdk/codec/types"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/golang/protobuf/ptypes/duration"
	github_com_maticnetwork_heimdall_types "github.com/maticnetwork/heimdall/types"
	github_com_maticnetwork_heimdall_types_common "github.com/maticnetwork/heimdall/types/common"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type MsgValidatorJoin struct {
	From            github_com_maticnetwork_heimdall_types_common.HeimdallAddress `protobuf:"bytes,1,opt,name=from,proto3,casttype=github.com/maticnetwork/heimdall/types/common.HeimdallAddress" json:"from,omitempty"`
	ID              github_com_maticnetwork_heimdall_types.ValidatorID            `protobuf:"varint,2,opt,name=id,proto3,casttype=github.com/maticnetwork/heimdall/types.ValidatorID" json:"id,omitempty"`
	ActivationEpoch uint64                                                        `protobuf:"varint,3,opt,name=activation_epoch,json=activationEpoch,proto3" json:"activation_epoch,omitempty"`
	Amount          github_com_cosmos_cosmos_sdk_types.Int                        `protobuf:"varint,4,opt,name=amount,proto3,casttype=github.com/cosmos/cosmos-sdk/types.Int" json:"amount,omitempty"`
	SignerPubKey    github_com_maticnetwork_heimdall_types_common.PubKey          `protobuf:"bytes,5,opt,name=signer_pub_key,json=signerPubKey,proto3,casttype=github.com/maticnetwork/heimdall/types/common.PubKey" json:"signer_pub_key,omitempty"`
	TxHash          github_com_maticnetwork_heimdall_types_common.HeimdallHash    `protobuf:"bytes,6,opt,name=tx_hash,json=txHash,proto3,casttype=github.com/maticnetwork/heimdall/types/common.HeimdallHash" json:"tx_hash,omitempty"`
	LogIndex        uint64                                                        `protobuf:"varint,7,opt,name=log_index,json=logIndex,proto3" json:"log_index,omitempty"`
	BlockNumber     uint64                                                        `protobuf:"varint,8,opt,name=block_number,json=blockNumber,proto3" json:"block_number,omitempty"`
	Nonce           uint64                                                        `protobuf:"varint,9,opt,name=nonce,proto3" json:"nonce,omitempty"`
}

func (m *MsgValidatorJoin) Reset()         { *m = MsgValidatorJoin{} }
func (m *MsgValidatorJoin) String() string { return proto.CompactTextString(m) }
func (*MsgValidatorJoin) ProtoMessage()    {}
func (*MsgValidatorJoin) Descriptor() ([]byte, []int) {
	return fileDescriptor_c6b2771020bbd7c4, []int{0}
}
func (m *MsgValidatorJoin) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgValidatorJoin) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgValidatorJoin.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgValidatorJoin) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgValidatorJoin.Merge(m, src)
}
func (m *MsgValidatorJoin) XXX_Size() int {
	return m.Size()
}
func (m *MsgValidatorJoin) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgValidatorJoin.DiscardUnknown(m)
}

var xxx_messageInfo_MsgValidatorJoin proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgValidatorJoin)(nil), "heimdall.staking.x.staking.types.MsgValidatorJoin")
}

func init() { proto.RegisterFile("staking/v1beta/msg.proto", fileDescriptor_c6b2771020bbd7c4) }

var fileDescriptor_c6b2771020bbd7c4 = []byte{
	// 483 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x53, 0x4f, 0x6f, 0xd3, 0x30,
	0x1c, 0x6d, 0x4a, 0xd7, 0x6d, 0xa6, 0x82, 0xc9, 0xda, 0xc1, 0x0c, 0x29, 0x29, 0x1c, 0xd0, 0x40,
	0x22, 0xe6, 0xdf, 0x01, 0x4d, 0x80, 0xb4, 0x6a, 0x48, 0xeb, 0xf8, 0x23, 0x14, 0x09, 0x90, 0x38,
	0x10, 0x39, 0x89, 0xe7, 0x58, 0x8d, 0xfd, 0xab, 0x62, 0x67, 0xb4, 0xdf, 0x80, 0x23, 0x1f, 0x81,
	0xef, 0xc1, 0x17, 0xe0, 0xb8, 0x23, 0xa7, 0x08, 0xb5, 0xdf, 0xa2, 0x27, 0x54, 0x37, 0x1b, 0x88,
	0x0b, 0x7f, 0x4e, 0xf6, 0x7b, 0xcf, 0x7e, 0xbf, 0xe7, 0xa7, 0x04, 0x11, 0x63, 0xd9, 0x48, 0x6a,
	0x41, 0x4f, 0xee, 0x26, 0xdc, 0x32, 0xaa, 0x8c, 0x08, 0xc7, 0x25, 0x58, 0xc0, 0xfd, 0x9c, 0x4b,
	0x95, 0xb1, 0xa2, 0x08, 0x9b, 0x23, 0xe1, 0xe4, 0x7c, 0x67, 0xa7, 0x63, 0x6e, 0x76, 0xb6, 0x05,
	0x08, 0x70, 0x87, 0xe9, 0x72, 0xb7, 0xba, 0xb7, 0x73, 0x45, 0x00, 0x88, 0x82, 0x53, 0x87, 0x92,
	0xea, 0x98, 0x32, 0x3d, 0x6d, 0x24, 0xff, 0x77, 0x29, 0xab, 0x4a, 0x66, 0x25, 0xe8, 0x95, 0x7e,
	0xfd, 0x4b, 0x07, 0x6d, 0xbd, 0x30, 0xe2, 0x0d, 0x2b, 0x64, 0xc6, 0x2c, 0x94, 0x47, 0x20, 0x35,
	0x7e, 0x8d, 0x3a, 0xc7, 0x25, 0x28, 0xe2, 0xf5, 0xbd, 0xdd, 0xde, 0x60, 0x7f, 0x51, 0x07, 0x8f,
	0x85, 0xb4, 0x79, 0x95, 0x84, 0x29, 0x28, 0xaa, 0x98, 0x95, 0xa9, 0xe6, 0xf6, 0x03, 0x94, 0x23,
	0x7a, 0x96, 0x98, 0xba, 0x7c, 0x34, 0x05, 0xa5, 0x40, 0x87, 0x87, 0x0d, 0xbb, 0x9f, 0x65, 0x25,
	0x37, 0x26, 0x72, 0x76, 0xf8, 0x39, 0x6a, 0xcb, 0x8c, 0xb4, 0xfb, 0xde, 0x6e, 0x67, 0xf0, 0x68,
	0x56, 0x07, 0xed, 0xe1, 0xc1, 0xa2, 0x0e, 0xee, 0xfd, 0x9d, 0x75, 0x78, 0x1e, 0x71, 0x78, 0x10,
	0xb5, 0x65, 0x86, 0x6f, 0xa2, 0x2d, 0x96, 0x5a, 0x79, 0xe2, 0x5e, 0x13, 0xf3, 0x31, 0xa4, 0x39,
	0xb9, 0xb0, 0xf4, 0x8e, 0x2e, 0xff, 0xe4, 0x9f, 0x2e, 0x69, 0x3c, 0x40, 0x5d, 0xa6, 0xa0, 0xd2,
	0x96, 0x74, 0xdc, 0xf0, 0x5b, 0x8b, 0x3a, 0xb8, 0xf1, 0xcb, 0xd8, 0x14, 0x8c, 0x02, 0xd3, 0x2c,
	0xb7, 0x4d, 0x36, 0x6a, 0x46, 0x0e, 0xb5, 0x8d, 0x9a, 0x9b, 0xf8, 0x3d, 0xba, 0x64, 0xa4, 0xd0,
	0xbc, 0x8c, 0xc7, 0x55, 0x12, 0x8f, 0xf8, 0x94, 0xac, 0xb9, 0x76, 0x1e, 0x2e, 0xea, 0xe0, 0xc1,
	0xbf, 0xb5, 0xf3, 0xaa, 0x4a, 0x9e, 0xf1, 0x69, 0xd4, 0x5b, 0xf9, 0xad, 0x10, 0x7e, 0x8b, 0xd6,
	0xed, 0x24, 0xce, 0x99, 0xc9, 0x49, 0xd7, 0x19, 0x3f, 0x59, 0xd4, 0xc1, 0xde, 0xff, 0xd5, 0x7e,
	0xc8, 0x4c, 0x1e, 0x75, 0xed, 0x64, 0xb9, 0xe2, 0xab, 0x68, 0xb3, 0x00, 0x11, 0x4b, 0x9d, 0xf1,
	0x09, 0x59, 0x77, 0x05, 0x6d, 0x14, 0x20, 0x86, 0x4b, 0x8c, 0xaf, 0xa1, 0x5e, 0x52, 0x40, 0x3a,
	0x8a, 0x75, 0xa5, 0x12, 0x5e, 0x92, 0x0d, 0xa7, 0x5f, 0x74, 0xdc, 0x4b, 0x47, 0xe1, 0x6d, 0xb4,
	0xa6, 0x41, 0xa7, 0x9c, 0x6c, 0x3a, 0x6d, 0x05, 0xf6, 0x3a, 0x1f, 0x3f, 0x07, 0xad, 0xc1, 0xd1,
	0xd7, 0x99, 0xef, 0x9d, 0xce, 0x7c, 0xef, 0xfb, 0xcc, 0xf7, 0x3e, 0xcd, 0xfd, 0xd6, 0xe9, 0xdc,
	0x6f, 0x7d, 0x9b, 0xfb, 0xad, 0x77, 0x77, 0xfe, 0x98, 0x7c, 0x42, 0xcf, 0xfe, 0x03, 0xf7, 0x86,
	0xa4, 0xeb, 0x3e, 0xc8, 0xfb, 0x3f, 0x02, 0x00, 0x00, 0xff, 0xff, 0x33, 0xee, 0xe8, 0x45, 0x1f,
	0x03, 0x00, 0x00,
}

func (m *MsgValidatorJoin) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgValidatorJoin) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgValidatorJoin) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Nonce != 0 {
		i = encodeVarintMsg(dAtA, i, uint64(m.Nonce))
		i--
		dAtA[i] = 0x48
	}
	if m.BlockNumber != 0 {
		i = encodeVarintMsg(dAtA, i, uint64(m.BlockNumber))
		i--
		dAtA[i] = 0x40
	}
	if m.LogIndex != 0 {
		i = encodeVarintMsg(dAtA, i, uint64(m.LogIndex))
		i--
		dAtA[i] = 0x38
	}
	if len(m.TxHash) > 0 {
		i -= len(m.TxHash)
		copy(dAtA[i:], m.TxHash)
		i = encodeVarintMsg(dAtA, i, uint64(len(m.TxHash)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.SignerPubKey) > 0 {
		i -= len(m.SignerPubKey)
		copy(dAtA[i:], m.SignerPubKey)
		i = encodeVarintMsg(dAtA, i, uint64(len(m.SignerPubKey)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Amount != 0 {
		i = encodeVarintMsg(dAtA, i, uint64(m.Amount))
		i--
		dAtA[i] = 0x20
	}
	if m.ActivationEpoch != 0 {
		i = encodeVarintMsg(dAtA, i, uint64(m.ActivationEpoch))
		i--
		dAtA[i] = 0x18
	}
	if m.ID != 0 {
		i = encodeVarintMsg(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x10
	}
	if len(m.From) > 0 {
		i -= len(m.From)
		copy(dAtA[i:], m.From)
		i = encodeVarintMsg(dAtA, i, uint64(len(m.From)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintMsg(dAtA []byte, offset int, v uint64) int {
	offset -= sovMsg(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgValidatorJoin) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.From)
	if l > 0 {
		n += 1 + l + sovMsg(uint64(l))
	}
	if m.ID != 0 {
		n += 1 + sovMsg(uint64(m.ID))
	}
	if m.ActivationEpoch != 0 {
		n += 1 + sovMsg(uint64(m.ActivationEpoch))
	}
	if m.Amount != 0 {
		n += 1 + sovMsg(uint64(m.Amount))
	}
	l = len(m.SignerPubKey)
	if l > 0 {
		n += 1 + l + sovMsg(uint64(l))
	}
	l = len(m.TxHash)
	if l > 0 {
		n += 1 + l + sovMsg(uint64(l))
	}
	if m.LogIndex != 0 {
		n += 1 + sovMsg(uint64(m.LogIndex))
	}
	if m.BlockNumber != 0 {
		n += 1 + sovMsg(uint64(m.BlockNumber))
	}
	if m.Nonce != 0 {
		n += 1 + sovMsg(uint64(m.Nonce))
	}
	return n
}

func sovMsg(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMsg(x uint64) (n int) {
	return sovMsg(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgValidatorJoin) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgValidatorJoin: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgValidatorJoin: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMsg
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.From = append(m.From[:0], dAtA[iNdEx:postIndex]...)
			if m.From == nil {
				m.From = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= github_com_maticnetwork_heimdall_types.ValidatorID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActivationEpoch", wireType)
			}
			m.ActivationEpoch = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ActivationEpoch |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			m.Amount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Amount |= github_com_cosmos_cosmos_sdk_types.Int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SignerPubKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMsg
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SignerPubKey = append(m.SignerPubKey[:0], dAtA[iNdEx:postIndex]...)
			if m.SignerPubKey == nil {
				m.SignerPubKey = []byte{}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMsg
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TxHash = append(m.TxHash[:0], dAtA[iNdEx:postIndex]...)
			if m.TxHash == nil {
				m.TxHash = []byte{}
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogIndex", wireType)
			}
			m.LogIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LogIndex |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockNumber", wireType)
			}
			m.BlockNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockNumber |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nonce", wireType)
			}
			m.Nonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Nonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMsg
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMsg(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMsg
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMsg
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMsg
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMsg
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMsg        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMsg          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMsg = fmt.Errorf("proto: unexpected end of group")
)
