// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: staking/v1beta1/msg.proto

package types

import (
	context "context"
	fmt "fmt"
	types "github.com/cosmos/cosmos-sdk/codec/types"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	github_com_maticnetwork_heimdall_types "github.com/maticnetwork/heimdall/types"
	_ "github.com/regen-network/cosmos-proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// MsgValidatorJoin defines a message to join a new validator.
type MsgValidatorJoin struct {
	From            string                                             `protobuf:"bytes,1,opt,name=from,proto3" json:"from,omitempty"`
	ID              github_com_maticnetwork_heimdall_types.ValidatorID `protobuf:"varint,2,opt,name=id,proto3,casttype=github.com/maticnetwork/heimdall/types.ValidatorID" json:"id,omitempty"`
	ActivationEpoch uint64                                             `protobuf:"varint,3,opt,name=activation_epoch,json=activationEpoch,proto3" json:"activation_epoch,omitempty"`
	Amount          *github_com_cosmos_cosmos_sdk_types.Int            `protobuf:"bytes,4,opt,name=amount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"amount,omitempty"`
	SignerPubKey    string                                             `protobuf:"bytes,5,opt,name=signer_pub_key,json=signerPubKey,proto3" json:"signer_pub_key,omitempty"`
	TxHash          string                                             `protobuf:"bytes,6,opt,name=tx_hash,json=txHash,proto3" json:"tx_hash,omitempty"`
	LogIndex        uint64                                             `protobuf:"varint,7,opt,name=log_index,json=logIndex,proto3" json:"log_index,omitempty"`
	BlockNumber     uint64                                             `protobuf:"varint,8,opt,name=block_number,json=blockNumber,proto3" json:"block_number,omitempty"`
	Nonce           uint64                                             `protobuf:"varint,9,opt,name=nonce,proto3" json:"nonce,omitempty"`
}

func (m *MsgValidatorJoin) Reset()         { *m = MsgValidatorJoin{} }
func (m *MsgValidatorJoin) String() string { return proto.CompactTextString(m) }
func (*MsgValidatorJoin) ProtoMessage()    {}
func (*MsgValidatorJoin) Descriptor() ([]byte, []int) {
	return fileDescriptor_2118b48eedb93a64, []int{0}
}
func (m *MsgValidatorJoin) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgValidatorJoin) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgValidatorJoin.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgValidatorJoin) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgValidatorJoin.Merge(m, src)
}
func (m *MsgValidatorJoin) XXX_Size() int {
	return m.Size()
}
func (m *MsgValidatorJoin) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgValidatorJoin.DiscardUnknown(m)
}

var xxx_messageInfo_MsgValidatorJoin proto.InternalMessageInfo

// MsgValidatorJoinResponse defines ValidatorJoin response type.
type MsgValidatorJoinResponse struct {
}

func (m *MsgValidatorJoinResponse) Reset()         { *m = MsgValidatorJoinResponse{} }
func (m *MsgValidatorJoinResponse) String() string { return proto.CompactTextString(m) }
func (*MsgValidatorJoinResponse) ProtoMessage()    {}
func (*MsgValidatorJoinResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2118b48eedb93a64, []int{1}
}
func (m *MsgValidatorJoinResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgValidatorJoinResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgValidatorJoinResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgValidatorJoinResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgValidatorJoinResponse.Merge(m, src)
}
func (m *MsgValidatorJoinResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgValidatorJoinResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgValidatorJoinResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgValidatorJoinResponse proto.InternalMessageInfo

// MsgStakeUpdate defines a message to update stake for a validator.
type MsgStakeUpdate struct {
	From        string                                             `protobuf:"bytes,1,opt,name=from,proto3" json:"from,omitempty"`
	ID          github_com_maticnetwork_heimdall_types.ValidatorID `protobuf:"varint,2,opt,name=id,proto3,casttype=github.com/maticnetwork/heimdall/types.ValidatorID" json:"id,omitempty"`
	NewAmount   *github_com_cosmos_cosmos_sdk_types.Int            `protobuf:"bytes,3,opt,name=new_amount,json=newAmount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"new_amount,omitempty"`
	TxHash      string                                             `protobuf:"bytes,4,opt,name=tx_hash,json=txHash,proto3" json:"tx_hash,omitempty"`
	LogIndex    uint64                                             `protobuf:"varint,7,opt,name=log_index,json=logIndex,proto3" json:"log_index,omitempty"`
	BlockNumber uint64                                             `protobuf:"varint,8,opt,name=block_number,json=blockNumber,proto3" json:"block_number,omitempty"`
	Nonce       uint64                                             `protobuf:"varint,9,opt,name=nonce,proto3" json:"nonce,omitempty"`
}

func (m *MsgStakeUpdate) Reset()         { *m = MsgStakeUpdate{} }
func (m *MsgStakeUpdate) String() string { return proto.CompactTextString(m) }
func (*MsgStakeUpdate) ProtoMessage()    {}
func (*MsgStakeUpdate) Descriptor() ([]byte, []int) {
	return fileDescriptor_2118b48eedb93a64, []int{2}
}
func (m *MsgStakeUpdate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgStakeUpdate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgStakeUpdate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgStakeUpdate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgStakeUpdate.Merge(m, src)
}
func (m *MsgStakeUpdate) XXX_Size() int {
	return m.Size()
}
func (m *MsgStakeUpdate) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgStakeUpdate.DiscardUnknown(m)
}

var xxx_messageInfo_MsgStakeUpdate proto.InternalMessageInfo

// MsgStakeUpdateResponse defines StakeUpdate response type.
type MsgStakeUpdateResponse struct {
}

func (m *MsgStakeUpdateResponse) Reset()         { *m = MsgStakeUpdateResponse{} }
func (m *MsgStakeUpdateResponse) String() string { return proto.CompactTextString(m) }
func (*MsgStakeUpdateResponse) ProtoMessage()    {}
func (*MsgStakeUpdateResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2118b48eedb93a64, []int{3}
}
func (m *MsgStakeUpdateResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgStakeUpdateResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgStakeUpdateResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgStakeUpdateResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgStakeUpdateResponse.Merge(m, src)
}
func (m *MsgStakeUpdateResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgStakeUpdateResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgStakeUpdateResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgStakeUpdateResponse proto.InternalMessageInfo

// MsgSignerUpdate defines a message to update signer of a validator.
type MsgSignerUpdate struct {
	From            string                                             `protobuf:"bytes,1,opt,name=from,proto3" json:"from,omitempty"`
	ID              github_com_maticnetwork_heimdall_types.ValidatorID `protobuf:"varint,2,opt,name=id,proto3,casttype=github.com/maticnetwork/heimdall/types.ValidatorID" json:"id,omitempty"`
	NewSignerPubKey *types.Any                                         `protobuf:"bytes,3,opt,name=new_signer_pub_key,json=newSignerPubKey,proto3" json:"new_signer_pub_key,omitempty" yaml:"new_signer_pub_key"`
	TxHash          string                                             `protobuf:"bytes,4,opt,name=tx_hash,json=txHash,proto3" json:"tx_hash,omitempty"`
	LogIndex        uint64                                             `protobuf:"varint,5,opt,name=log_index,json=logIndex,proto3" json:"log_index,omitempty"`
	BlockNumber     uint64                                             `protobuf:"varint,6,opt,name=block_number,json=blockNumber,proto3" json:"block_number,omitempty"`
	Nonce           uint64                                             `protobuf:"varint,7,opt,name=nonce,proto3" json:"nonce,omitempty"`
}

func (m *MsgSignerUpdate) Reset()         { *m = MsgSignerUpdate{} }
func (m *MsgSignerUpdate) String() string { return proto.CompactTextString(m) }
func (*MsgSignerUpdate) ProtoMessage()    {}
func (*MsgSignerUpdate) Descriptor() ([]byte, []int) {
	return fileDescriptor_2118b48eedb93a64, []int{4}
}
func (m *MsgSignerUpdate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSignerUpdate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSignerUpdate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSignerUpdate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSignerUpdate.Merge(m, src)
}
func (m *MsgSignerUpdate) XXX_Size() int {
	return m.Size()
}
func (m *MsgSignerUpdate) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSignerUpdate.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSignerUpdate proto.InternalMessageInfo

// MsgSignerUpdateResponse defines SignerUpdate response type.
type MsgSignerUpdateResponse struct {
}

func (m *MsgSignerUpdateResponse) Reset()         { *m = MsgSignerUpdateResponse{} }
func (m *MsgSignerUpdateResponse) String() string { return proto.CompactTextString(m) }
func (*MsgSignerUpdateResponse) ProtoMessage()    {}
func (*MsgSignerUpdateResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2118b48eedb93a64, []int{5}
}
func (m *MsgSignerUpdateResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSignerUpdateResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSignerUpdateResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSignerUpdateResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSignerUpdateResponse.Merge(m, src)
}
func (m *MsgSignerUpdateResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgSignerUpdateResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSignerUpdateResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSignerUpdateResponse proto.InternalMessageInfo

// MsgValidatorExit defines a message to exit as a validator
type MsgValidatorExit struct {
	From              string                                             `protobuf:"bytes,1,opt,name=from,proto3" json:"from,omitempty"`
	ID                github_com_maticnetwork_heimdall_types.ValidatorID `protobuf:"varint,2,opt,name=id,proto3,casttype=github.com/maticnetwork/heimdall/types.ValidatorID" json:"id,omitempty"`
	DeactivationEpoch uint64                                             `protobuf:"varint,3,opt,name=deactivation_epoch,json=deactivationEpoch,proto3" json:"deactivation_epoch,omitempty"`
	TxHash            string                                             `protobuf:"bytes,4,opt,name=tx_hash,json=txHash,proto3" json:"tx_hash,omitempty"`
	LogIndex          uint64                                             `protobuf:"varint,5,opt,name=log_index,json=logIndex,proto3" json:"log_index,omitempty"`
	BlockNumber       uint64                                             `protobuf:"varint,6,opt,name=block_number,json=blockNumber,proto3" json:"block_number,omitempty"`
	Nonce             uint64                                             `protobuf:"varint,7,opt,name=nonce,proto3" json:"nonce,omitempty"`
}

func (m *MsgValidatorExit) Reset()         { *m = MsgValidatorExit{} }
func (m *MsgValidatorExit) String() string { return proto.CompactTextString(m) }
func (*MsgValidatorExit) ProtoMessage()    {}
func (*MsgValidatorExit) Descriptor() ([]byte, []int) {
	return fileDescriptor_2118b48eedb93a64, []int{6}
}
func (m *MsgValidatorExit) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgValidatorExit) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgValidatorExit.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgValidatorExit) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgValidatorExit.Merge(m, src)
}
func (m *MsgValidatorExit) XXX_Size() int {
	return m.Size()
}
func (m *MsgValidatorExit) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgValidatorExit.DiscardUnknown(m)
}

var xxx_messageInfo_MsgValidatorExit proto.InternalMessageInfo

// MsgValidatorExitResponse is response type for ValidatorExit RPC method
type MsgValidatorExitResponse struct {
}

func (m *MsgValidatorExitResponse) Reset()         { *m = MsgValidatorExitResponse{} }
func (m *MsgValidatorExitResponse) String() string { return proto.CompactTextString(m) }
func (*MsgValidatorExitResponse) ProtoMessage()    {}
func (*MsgValidatorExitResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2118b48eedb93a64, []int{7}
}
func (m *MsgValidatorExitResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgValidatorExitResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgValidatorExitResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgValidatorExitResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgValidatorExitResponse.Merge(m, src)
}
func (m *MsgValidatorExitResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgValidatorExitResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgValidatorExitResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgValidatorExitResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgValidatorJoin)(nil), "heimdall.staking.v1beta1.MsgValidatorJoin")
	proto.RegisterType((*MsgValidatorJoinResponse)(nil), "heimdall.staking.v1beta1.MsgValidatorJoinResponse")
	proto.RegisterType((*MsgStakeUpdate)(nil), "heimdall.staking.v1beta1.MsgStakeUpdate")
	proto.RegisterType((*MsgStakeUpdateResponse)(nil), "heimdall.staking.v1beta1.MsgStakeUpdateResponse")
	proto.RegisterType((*MsgSignerUpdate)(nil), "heimdall.staking.v1beta1.MsgSignerUpdate")
	proto.RegisterType((*MsgSignerUpdateResponse)(nil), "heimdall.staking.v1beta1.MsgSignerUpdateResponse")
	proto.RegisterType((*MsgValidatorExit)(nil), "heimdall.staking.v1beta1.MsgValidatorExit")
	proto.RegisterType((*MsgValidatorExitResponse)(nil), "heimdall.staking.v1beta1.MsgValidatorExitResponse")
}

func init() { proto.RegisterFile("staking/v1beta1/msg.proto", fileDescriptor_2118b48eedb93a64) }

var fileDescriptor_2118b48eedb93a64 = []byte{
	// 707 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x96, 0xcf, 0x6e, 0xd3, 0x4a,
	0x14, 0xc6, 0xf3, 0xaf, 0x69, 0x33, 0xed, 0x6d, 0x7b, 0x47, 0xd1, 0xad, 0x93, 0x2b, 0x25, 0xbd,
	0xd1, 0x15, 0x6a, 0x2b, 0xd5, 0x6e, 0x83, 0xd8, 0x54, 0x6c, 0x1a, 0xb5, 0x12, 0x29, 0x14, 0xa1,
	0x54, 0xb0, 0x60, 0x63, 0x8d, 0xed, 0xa9, 0x33, 0x8a, 0x3d, 0x63, 0x79, 0x26, 0x4d, 0xfc, 0x06,
	0x2c, 0x59, 0xb2, 0xe4, 0x19, 0x10, 0x0f, 0xc0, 0x12, 0xb1, 0xea, 0x12, 0xb1, 0x88, 0x50, 0xfa,
	0x06, 0x2c, 0x59, 0x20, 0xe4, 0xb1, 0x13, 0xdc, 0x54, 0x4d, 0xc3, 0x26, 0xac, 0xe2, 0x39, 0xe7,
	0x9b, 0x39, 0xe3, 0xdf, 0x9c, 0xf9, 0x62, 0x50, 0xe2, 0x02, 0x75, 0x08, 0xb5, 0xb5, 0x8b, 0x7d,
	0x03, 0x0b, 0xb4, 0xaf, 0xb9, 0xdc, 0x56, 0x3d, 0x9f, 0x09, 0x06, 0x95, 0x36, 0x26, 0xae, 0x85,
	0x1c, 0x47, 0x8d, 0x35, 0x6a, 0xac, 0x29, 0x17, 0x6d, 0x66, 0x33, 0x29, 0xd2, 0xc2, 0xa7, 0x48,
	0x5f, 0x2e, 0xd9, 0x8c, 0xd9, 0x0e, 0xd6, 0xe4, 0xc8, 0xe8, 0x9e, 0x6b, 0x88, 0x06, 0xa3, 0x94,
	0xc9, 0xb8, 0xcb, 0xb8, 0x1e, 0xcd, 0x89, 0x06, 0x51, 0xaa, 0xf6, 0x23, 0x03, 0xd6, 0x4f, 0xb9,
	0xfd, 0x02, 0x39, 0xc4, 0x42, 0x82, 0xf9, 0x27, 0x8c, 0x50, 0x08, 0x41, 0xee, 0xdc, 0x67, 0xae,
	0x92, 0xde, 0x4c, 0x6f, 0x15, 0x5a, 0xf2, 0x19, 0x3e, 0x01, 0x19, 0x62, 0x29, 0x99, 0xcd, 0xf4,
	0x56, 0xae, 0xf1, 0x70, 0x38, 0xa8, 0x66, 0x9a, 0x47, 0xdf, 0x07, 0xd5, 0xba, 0x4d, 0x44, 0xbb,
	0x6b, 0xa8, 0x26, 0x73, 0x35, 0x17, 0x09, 0x62, 0x52, 0x2c, 0x7a, 0xcc, 0xef, 0x68, 0xa3, 0xcd,
	0x6b, 0x22, 0xf0, 0x30, 0x57, 0xc7, 0xeb, 0x37, 0x8f, 0x5a, 0x19, 0x62, 0xc1, 0x6d, 0xb0, 0x8e,
	0x4c, 0x41, 0x2e, 0x90, 0x20, 0x8c, 0xea, 0xd8, 0x63, 0x66, 0x5b, 0xc9, 0x86, 0x6b, 0xb7, 0xd6,
	0x7e, 0xc5, 0x8f, 0xc3, 0x30, 0x6c, 0x80, 0x3c, 0x72, 0x59, 0x97, 0x0a, 0x25, 0x17, 0x6e, 0xa7,
	0xb1, 0xf3, 0x65, 0x50, 0xbd, 0x97, 0x28, 0x1b, 0xbd, 0x4e, 0xfc, 0xb3, 0xcb, 0xad, 0x4e, 0x5c,
	0xb2, 0x49, 0x45, 0x2b, 0x9e, 0x09, 0xff, 0x07, 0xab, 0x9c, 0xd8, 0x14, 0xfb, 0xba, 0xd7, 0x35,
	0xf4, 0x0e, 0x0e, 0x94, 0x05, 0xf9, 0x6a, 0x2b, 0x51, 0xf4, 0x59, 0xd7, 0x78, 0x8c, 0x03, 0xb8,
	0x01, 0x16, 0x45, 0x5f, 0x6f, 0x23, 0xde, 0x56, 0xf2, 0x32, 0x9d, 0x17, 0xfd, 0x47, 0x88, 0xb7,
	0xe1, 0xbf, 0xa0, 0xe0, 0x30, 0x5b, 0x27, 0xd4, 0xc2, 0x7d, 0x65, 0x51, 0x6e, 0x73, 0xc9, 0x61,
	0x76, 0x33, 0x1c, 0xc3, 0xff, 0xc0, 0x8a, 0xe1, 0x30, 0xb3, 0xa3, 0xd3, 0xae, 0x6b, 0x60, 0x5f,
	0x59, 0x92, 0xf9, 0x65, 0x19, 0x7b, 0x2a, 0x43, 0xb0, 0x08, 0x16, 0x28, 0xa3, 0x26, 0x56, 0x0a,
	0x32, 0x17, 0x0d, 0x0e, 0x72, 0xaf, 0xde, 0x56, 0x53, 0xb5, 0x32, 0x50, 0x26, 0xf9, 0xb7, 0x30,
	0xf7, 0x18, 0xe5, 0xb8, 0xf6, 0x2e, 0x03, 0x56, 0x4f, 0xb9, 0x7d, 0x26, 0x50, 0x07, 0x3f, 0xf7,
	0x2c, 0x24, 0xf0, 0x1c, 0x8e, 0xa6, 0x09, 0x00, 0xc5, 0x3d, 0x3d, 0x66, 0x9e, 0xfd, 0x6d, 0xe6,
	0x05, 0x8a, 0x7b, 0x87, 0x11, 0xf6, 0x04, 0xd0, 0xdc, 0xdc, 0x80, 0x2a, 0xe0, 0x9f, 0xeb, 0xcc,
	0xc6, 0x38, 0x87, 0x19, 0xb0, 0x16, 0xa6, 0xe4, 0x99, 0xcf, 0x8d, 0x67, 0x1f, 0xc0, 0x90, 0xe7,
	0x44, 0xff, 0x85, 0x5c, 0x97, 0xeb, 0x45, 0x35, 0xba, 0xb4, 0xea, 0xe8, 0xd2, 0xaa, 0x87, 0x34,
	0x68, 0x3c, 0xf8, 0x36, 0xa8, 0x96, 0x02, 0xe4, 0x3a, 0x07, 0xb5, 0x9b, 0x33, 0x6b, 0x9f, 0xde,
	0xef, 0x16, 0xe3, 0x2b, 0x6c, 0xfa, 0x81, 0x27, 0x98, 0x1a, 0xb5, 0x6f, 0x6b, 0x8d, 0xe2, 0xde,
	0xd9, 0x2d, 0xfd, 0x3c, 0x05, 0xff, 0xc2, 0x1d, 0xf8, 0xf3, 0x53, 0xf0, 0x2f, 0xde, 0xc4, 0x5f,
	0x02, 0x1b, 0x13, 0x8c, 0xc7, 0xfc, 0xdf, 0x4c, 0x78, 0xcd, 0x71, 0x9f, 0x88, 0x39, 0x1c, 0xc0,
	0x2e, 0x80, 0x16, 0xbe, 0xc5, 0x6d, 0xfe, 0x4e, 0x66, 0x22, 0xbf, 0xf9, 0x23, 0xd4, 0x26, 0x5c,
	0x20, 0x24, 0x33, 0xc2, 0x56, 0xff, 0x90, 0x05, 0xd9, 0x53, 0x6e, 0x43, 0x06, 0xfe, 0xba, 0x6e,
	0xd3, 0x3b, 0xea, 0x6d, 0x7f, 0x11, 0xea, 0xa4, 0xa5, 0x94, 0xeb, 0xb3, 0x6b, 0x47, 0x85, 0x21,
	0x01, 0xcb, 0x49, 0xeb, 0xd9, 0x9a, 0xba, 0x44, 0x42, 0x59, 0xde, 0x9b, 0x55, 0x39, 0x2e, 0xe5,
	0x80, 0x95, 0x6b, 0xd7, 0x72, 0x7b, 0xfa, 0x0a, 0x09, 0x69, 0x79, 0x7f, 0x66, 0xe9, 0xb8, 0x5a,
	0x92, 0xa4, 0x6c, 0xc2, 0x19, 0x49, 0x86, 0xda, 0x59, 0x49, 0x26, 0x8f, 0xb0, 0x71, 0xf2, 0x71,
	0x58, 0x49, 0x5f, 0x0e, 0x2b, 0xe9, 0xaf, 0xc3, 0x4a, 0xfa, 0xf5, 0x55, 0x25, 0x75, 0x79, 0x55,
	0x49, 0x7d, 0xbe, 0xaa, 0xa4, 0x5e, 0xee, 0xdd, 0xd9, 0xd4, 0x7d, 0x6d, 0xf4, 0x8d, 0x20, 0xdb,
	0xdb, 0xc8, 0x4b, 0xaf, 0xb8, 0xff, 0x33, 0x00, 0x00, 0xff, 0xff, 0x9d, 0xd0, 0x47, 0x34, 0x3b,
	0x08, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	// ValidatorJoin defines a method to join a new validator.
	ValidatorJoin(ctx context.Context, in *MsgValidatorJoin, opts ...grpc.CallOption) (*MsgValidatorJoinResponse, error)
	// StakeUpdate defines a method to update stake for an existing validator.
	StakeUpdate(ctx context.Context, in *MsgStakeUpdate, opts ...grpc.CallOption) (*MsgStakeUpdateResponse, error)
	// SignerUpdate defines a method for update singer details of
	// exisitng validator.
	SignerUpdate(ctx context.Context, in *MsgSignerUpdate, opts ...grpc.CallOption) (*MsgSignerUpdateResponse, error)
	// ValidatorExit defines a method to handle validator exit
	ValidatorExit(ctx context.Context, in *MsgValidatorExit, opts ...grpc.CallOption) (*MsgValidatorExitResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) ValidatorJoin(ctx context.Context, in *MsgValidatorJoin, opts ...grpc.CallOption) (*MsgValidatorJoinResponse, error) {
	out := new(MsgValidatorJoinResponse)
	err := c.cc.Invoke(ctx, "/heimdall.staking.v1beta1.Msg/ValidatorJoin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) StakeUpdate(ctx context.Context, in *MsgStakeUpdate, opts ...grpc.CallOption) (*MsgStakeUpdateResponse, error) {
	out := new(MsgStakeUpdateResponse)
	err := c.cc.Invoke(ctx, "/heimdall.staking.v1beta1.Msg/StakeUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SignerUpdate(ctx context.Context, in *MsgSignerUpdate, opts ...grpc.CallOption) (*MsgSignerUpdateResponse, error) {
	out := new(MsgSignerUpdateResponse)
	err := c.cc.Invoke(ctx, "/heimdall.staking.v1beta1.Msg/SignerUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ValidatorExit(ctx context.Context, in *MsgValidatorExit, opts ...grpc.CallOption) (*MsgValidatorExitResponse, error) {
	out := new(MsgValidatorExitResponse)
	err := c.cc.Invoke(ctx, "/heimdall.staking.v1beta1.Msg/ValidatorExit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	// ValidatorJoin defines a method to join a new validator.
	ValidatorJoin(context.Context, *MsgValidatorJoin) (*MsgValidatorJoinResponse, error)
	// StakeUpdate defines a method to update stake for an existing validator.
	StakeUpdate(context.Context, *MsgStakeUpdate) (*MsgStakeUpdateResponse, error)
	// SignerUpdate defines a method for update singer details of
	// exisitng validator.
	SignerUpdate(context.Context, *MsgSignerUpdate) (*MsgSignerUpdateResponse, error)
	// ValidatorExit defines a method to handle validator exit
	ValidatorExit(context.Context, *MsgValidatorExit) (*MsgValidatorExitResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) ValidatorJoin(ctx context.Context, req *MsgValidatorJoin) (*MsgValidatorJoinResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidatorJoin not implemented")
}
func (*UnimplementedMsgServer) StakeUpdate(ctx context.Context, req *MsgStakeUpdate) (*MsgStakeUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StakeUpdate not implemented")
}
func (*UnimplementedMsgServer) SignerUpdate(ctx context.Context, req *MsgSignerUpdate) (*MsgSignerUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignerUpdate not implemented")
}
func (*UnimplementedMsgServer) ValidatorExit(ctx context.Context, req *MsgValidatorExit) (*MsgValidatorExitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidatorExit not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_ValidatorJoin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgValidatorJoin)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ValidatorJoin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/heimdall.staking.v1beta1.Msg/ValidatorJoin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ValidatorJoin(ctx, req.(*MsgValidatorJoin))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_StakeUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgStakeUpdate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).StakeUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/heimdall.staking.v1beta1.Msg/StakeUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).StakeUpdate(ctx, req.(*MsgStakeUpdate))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SignerUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSignerUpdate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SignerUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/heimdall.staking.v1beta1.Msg/SignerUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SignerUpdate(ctx, req.(*MsgSignerUpdate))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ValidatorExit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgValidatorExit)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ValidatorExit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/heimdall.staking.v1beta1.Msg/ValidatorExit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ValidatorExit(ctx, req.(*MsgValidatorExit))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "heimdall.staking.v1beta1.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ValidatorJoin",
			Handler:    _Msg_ValidatorJoin_Handler,
		},
		{
			MethodName: "StakeUpdate",
			Handler:    _Msg_StakeUpdate_Handler,
		},
		{
			MethodName: "SignerUpdate",
			Handler:    _Msg_SignerUpdate_Handler,
		},
		{
			MethodName: "ValidatorExit",
			Handler:    _Msg_ValidatorExit_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "staking/v1beta1/msg.proto",
}

func (m *MsgValidatorJoin) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgValidatorJoin) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgValidatorJoin) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Nonce != 0 {
		i = encodeVarintMsg(dAtA, i, uint64(m.Nonce))
		i--
		dAtA[i] = 0x48
	}
	if m.BlockNumber != 0 {
		i = encodeVarintMsg(dAtA, i, uint64(m.BlockNumber))
		i--
		dAtA[i] = 0x40
	}
	if m.LogIndex != 0 {
		i = encodeVarintMsg(dAtA, i, uint64(m.LogIndex))
		i--
		dAtA[i] = 0x38
	}
	if len(m.TxHash) > 0 {
		i -= len(m.TxHash)
		copy(dAtA[i:], m.TxHash)
		i = encodeVarintMsg(dAtA, i, uint64(len(m.TxHash)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.SignerPubKey) > 0 {
		i -= len(m.SignerPubKey)
		copy(dAtA[i:], m.SignerPubKey)
		i = encodeVarintMsg(dAtA, i, uint64(len(m.SignerPubKey)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Amount != nil {
		{
			size := m.Amount.Size()
			i -= size
			if _, err := m.Amount.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
			i = encodeVarintMsg(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.ActivationEpoch != 0 {
		i = encodeVarintMsg(dAtA, i, uint64(m.ActivationEpoch))
		i--
		dAtA[i] = 0x18
	}
	if m.ID != 0 {
		i = encodeVarintMsg(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x10
	}
	if len(m.From) > 0 {
		i -= len(m.From)
		copy(dAtA[i:], m.From)
		i = encodeVarintMsg(dAtA, i, uint64(len(m.From)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgValidatorJoinResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgValidatorJoinResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgValidatorJoinResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgStakeUpdate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgStakeUpdate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgStakeUpdate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Nonce != 0 {
		i = encodeVarintMsg(dAtA, i, uint64(m.Nonce))
		i--
		dAtA[i] = 0x48
	}
	if m.BlockNumber != 0 {
		i = encodeVarintMsg(dAtA, i, uint64(m.BlockNumber))
		i--
		dAtA[i] = 0x40
	}
	if m.LogIndex != 0 {
		i = encodeVarintMsg(dAtA, i, uint64(m.LogIndex))
		i--
		dAtA[i] = 0x38
	}
	if len(m.TxHash) > 0 {
		i -= len(m.TxHash)
		copy(dAtA[i:], m.TxHash)
		i = encodeVarintMsg(dAtA, i, uint64(len(m.TxHash)))
		i--
		dAtA[i] = 0x22
	}
	if m.NewAmount != nil {
		{
			size := m.NewAmount.Size()
			i -= size
			if _, err := m.NewAmount.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
			i = encodeVarintMsg(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.ID != 0 {
		i = encodeVarintMsg(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x10
	}
	if len(m.From) > 0 {
		i -= len(m.From)
		copy(dAtA[i:], m.From)
		i = encodeVarintMsg(dAtA, i, uint64(len(m.From)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgStakeUpdateResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgStakeUpdateResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgStakeUpdateResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgSignerUpdate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSignerUpdate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSignerUpdate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Nonce != 0 {
		i = encodeVarintMsg(dAtA, i, uint64(m.Nonce))
		i--
		dAtA[i] = 0x38
	}
	if m.BlockNumber != 0 {
		i = encodeVarintMsg(dAtA, i, uint64(m.BlockNumber))
		i--
		dAtA[i] = 0x30
	}
	if m.LogIndex != 0 {
		i = encodeVarintMsg(dAtA, i, uint64(m.LogIndex))
		i--
		dAtA[i] = 0x28
	}
	if len(m.TxHash) > 0 {
		i -= len(m.TxHash)
		copy(dAtA[i:], m.TxHash)
		i = encodeVarintMsg(dAtA, i, uint64(len(m.TxHash)))
		i--
		dAtA[i] = 0x22
	}
	if m.NewSignerPubKey != nil {
		{
			size, err := m.NewSignerPubKey.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMsg(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.ID != 0 {
		i = encodeVarintMsg(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x10
	}
	if len(m.From) > 0 {
		i -= len(m.From)
		copy(dAtA[i:], m.From)
		i = encodeVarintMsg(dAtA, i, uint64(len(m.From)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgSignerUpdateResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSignerUpdateResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSignerUpdateResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgValidatorExit) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgValidatorExit) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgValidatorExit) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Nonce != 0 {
		i = encodeVarintMsg(dAtA, i, uint64(m.Nonce))
		i--
		dAtA[i] = 0x38
	}
	if m.BlockNumber != 0 {
		i = encodeVarintMsg(dAtA, i, uint64(m.BlockNumber))
		i--
		dAtA[i] = 0x30
	}
	if m.LogIndex != 0 {
		i = encodeVarintMsg(dAtA, i, uint64(m.LogIndex))
		i--
		dAtA[i] = 0x28
	}
	if len(m.TxHash) > 0 {
		i -= len(m.TxHash)
		copy(dAtA[i:], m.TxHash)
		i = encodeVarintMsg(dAtA, i, uint64(len(m.TxHash)))
		i--
		dAtA[i] = 0x22
	}
	if m.DeactivationEpoch != 0 {
		i = encodeVarintMsg(dAtA, i, uint64(m.DeactivationEpoch))
		i--
		dAtA[i] = 0x18
	}
	if m.ID != 0 {
		i = encodeVarintMsg(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x10
	}
	if len(m.From) > 0 {
		i -= len(m.From)
		copy(dAtA[i:], m.From)
		i = encodeVarintMsg(dAtA, i, uint64(len(m.From)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgValidatorExitResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgValidatorExitResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgValidatorExitResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintMsg(dAtA []byte, offset int, v uint64) int {
	offset -= sovMsg(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgValidatorJoin) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.From)
	if l > 0 {
		n += 1 + l + sovMsg(uint64(l))
	}
	if m.ID != 0 {
		n += 1 + sovMsg(uint64(m.ID))
	}
	if m.ActivationEpoch != 0 {
		n += 1 + sovMsg(uint64(m.ActivationEpoch))
	}
	if m.Amount != nil {
		l = m.Amount.Size()
		n += 1 + l + sovMsg(uint64(l))
	}
	l = len(m.SignerPubKey)
	if l > 0 {
		n += 1 + l + sovMsg(uint64(l))
	}
	l = len(m.TxHash)
	if l > 0 {
		n += 1 + l + sovMsg(uint64(l))
	}
	if m.LogIndex != 0 {
		n += 1 + sovMsg(uint64(m.LogIndex))
	}
	if m.BlockNumber != 0 {
		n += 1 + sovMsg(uint64(m.BlockNumber))
	}
	if m.Nonce != 0 {
		n += 1 + sovMsg(uint64(m.Nonce))
	}
	return n
}

func (m *MsgValidatorJoinResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgStakeUpdate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.From)
	if l > 0 {
		n += 1 + l + sovMsg(uint64(l))
	}
	if m.ID != 0 {
		n += 1 + sovMsg(uint64(m.ID))
	}
	if m.NewAmount != nil {
		l = m.NewAmount.Size()
		n += 1 + l + sovMsg(uint64(l))
	}
	l = len(m.TxHash)
	if l > 0 {
		n += 1 + l + sovMsg(uint64(l))
	}
	if m.LogIndex != 0 {
		n += 1 + sovMsg(uint64(m.LogIndex))
	}
	if m.BlockNumber != 0 {
		n += 1 + sovMsg(uint64(m.BlockNumber))
	}
	if m.Nonce != 0 {
		n += 1 + sovMsg(uint64(m.Nonce))
	}
	return n
}

func (m *MsgStakeUpdateResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgSignerUpdate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.From)
	if l > 0 {
		n += 1 + l + sovMsg(uint64(l))
	}
	if m.ID != 0 {
		n += 1 + sovMsg(uint64(m.ID))
	}
	if m.NewSignerPubKey != nil {
		l = m.NewSignerPubKey.Size()
		n += 1 + l + sovMsg(uint64(l))
	}
	l = len(m.TxHash)
	if l > 0 {
		n += 1 + l + sovMsg(uint64(l))
	}
	if m.LogIndex != 0 {
		n += 1 + sovMsg(uint64(m.LogIndex))
	}
	if m.BlockNumber != 0 {
		n += 1 + sovMsg(uint64(m.BlockNumber))
	}
	if m.Nonce != 0 {
		n += 1 + sovMsg(uint64(m.Nonce))
	}
	return n
}

func (m *MsgSignerUpdateResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgValidatorExit) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.From)
	if l > 0 {
		n += 1 + l + sovMsg(uint64(l))
	}
	if m.ID != 0 {
		n += 1 + sovMsg(uint64(m.ID))
	}
	if m.DeactivationEpoch != 0 {
		n += 1 + sovMsg(uint64(m.DeactivationEpoch))
	}
	l = len(m.TxHash)
	if l > 0 {
		n += 1 + l + sovMsg(uint64(l))
	}
	if m.LogIndex != 0 {
		n += 1 + sovMsg(uint64(m.LogIndex))
	}
	if m.BlockNumber != 0 {
		n += 1 + sovMsg(uint64(m.BlockNumber))
	}
	if m.Nonce != 0 {
		n += 1 + sovMsg(uint64(m.Nonce))
	}
	return n
}

func (m *MsgValidatorExitResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovMsg(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMsg(x uint64) (n int) {
	return sovMsg(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgValidatorJoin) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgValidatorJoin: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgValidatorJoin: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsg
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.From = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= github_com_maticnetwork_heimdall_types.ValidatorID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActivationEpoch", wireType)
			}
			m.ActivationEpoch = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ActivationEpoch |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsg
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v github_com_cosmos_cosmos_sdk_types.Int
			m.Amount = &v
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SignerPubKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsg
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SignerPubKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsg
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TxHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogIndex", wireType)
			}
			m.LogIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LogIndex |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockNumber", wireType)
			}
			m.BlockNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockNumber |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nonce", wireType)
			}
			m.Nonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Nonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMsg
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgValidatorJoinResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgValidatorJoinResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgValidatorJoinResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMsg
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgStakeUpdate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgStakeUpdate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgStakeUpdate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsg
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.From = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= github_com_maticnetwork_heimdall_types.ValidatorID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsg
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v github_com_cosmos_cosmos_sdk_types.Int
			m.NewAmount = &v
			if err := m.NewAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsg
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TxHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogIndex", wireType)
			}
			m.LogIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LogIndex |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockNumber", wireType)
			}
			m.BlockNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockNumber |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nonce", wireType)
			}
			m.Nonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Nonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMsg
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgStakeUpdateResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgStakeUpdateResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgStakeUpdateResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMsg
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSignerUpdate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSignerUpdate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSignerUpdate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsg
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.From = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= github_com_maticnetwork_heimdall_types.ValidatorID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewSignerPubKey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsg
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NewSignerPubKey == nil {
				m.NewSignerPubKey = &types.Any{}
			}
			if err := m.NewSignerPubKey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsg
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TxHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogIndex", wireType)
			}
			m.LogIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LogIndex |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockNumber", wireType)
			}
			m.BlockNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockNumber |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nonce", wireType)
			}
			m.Nonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Nonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMsg
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSignerUpdateResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSignerUpdateResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSignerUpdateResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMsg
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgValidatorExit) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgValidatorExit: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgValidatorExit: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsg
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.From = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= github_com_maticnetwork_heimdall_types.ValidatorID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeactivationEpoch", wireType)
			}
			m.DeactivationEpoch = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DeactivationEpoch |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsg
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TxHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogIndex", wireType)
			}
			m.LogIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LogIndex |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockNumber", wireType)
			}
			m.BlockNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockNumber |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nonce", wireType)
			}
			m.Nonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Nonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMsg
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgValidatorExitResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgValidatorExitResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgValidatorExitResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMsg
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMsg(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMsg
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMsg
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMsg
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMsg
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMsg        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMsg          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMsg = fmt.Errorf("proto: unexpected end of group")
)
