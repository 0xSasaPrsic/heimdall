// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: gov/v1beta/msg.proto

package types

import (
	context "context"
	fmt "fmt"
	types "github.com/cosmos/cosmos-sdk/codec/types"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	types1 "github.com/maticnetwork/heimdall/types"
	_ "github.com/regen-network/cosmos-proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// MsgSubmitProposal defines an sdk.Msg type that supports submitting arbitrary
// proposal Content.
type MsgSubmitProposal struct {
	Content        *types.Any                                    `protobuf:"bytes,1,opt,name=content,proto3" json:"content,omitempty"`
	InitialDeposit Coins                                         `protobuf:"bytes,2,rep,name=initial_deposit,json=initialDeposit,proto3,castrepeated=Coins" json:"initial_deposit" yaml:"initial_deposit"`
	Proposer       github_com_cosmos_cosmos_sdk_types.AccAddress `protobuf:"bytes,3,opt,name=proposer,proto3,casttype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"proposer,omitempty"`
	Validator      types1.ValidatorID                            `protobuf:"varint,4,opt,name=validator,proto3,enum=heimdall.types.ValidatorID" json:"validator,omitempty"`
}

func (m *MsgSubmitProposal) Reset()         { *m = MsgSubmitProposal{} }
func (m *MsgSubmitProposal) String() string { return proto.CompactTextString(m) }
func (*MsgSubmitProposal) ProtoMessage()    {}
func (*MsgSubmitProposal) Descriptor() ([]byte, []int) {
	return fileDescriptor_bae8eb75fbe126bf, []int{0}
}
func (m *MsgSubmitProposal) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MsgSubmitProposal.Unmarshal(m, b)
}
func (m *MsgSubmitProposal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MsgSubmitProposal.Marshal(b, m, deterministic)
}
func (m *MsgSubmitProposal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSubmitProposal.Merge(m, src)
}
func (m *MsgSubmitProposal) XXX_Size() int {
	return xxx_messageInfo_MsgSubmitProposal.Size(m)
}
func (m *MsgSubmitProposal) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSubmitProposal.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSubmitProposal proto.InternalMessageInfo

// MsgSubmitProposalResponse defines the Msg/SubmitProposal response type.
type MsgSubmitProposalResponse struct {
	ProposalId uint64 `protobuf:"varint,1,opt,name=proposal_id,json=proposalId,proto3" json:"proposal_id" yaml:"proposal_id"`
}

func (m *MsgSubmitProposalResponse) Reset()         { *m = MsgSubmitProposalResponse{} }
func (m *MsgSubmitProposalResponse) String() string { return proto.CompactTextString(m) }
func (*MsgSubmitProposalResponse) ProtoMessage()    {}
func (*MsgSubmitProposalResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_bae8eb75fbe126bf, []int{1}
}
func (m *MsgSubmitProposalResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MsgSubmitProposalResponse.Unmarshal(m, b)
}
func (m *MsgSubmitProposalResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MsgSubmitProposalResponse.Marshal(b, m, deterministic)
}
func (m *MsgSubmitProposalResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSubmitProposalResponse.Merge(m, src)
}
func (m *MsgSubmitProposalResponse) XXX_Size() int {
	return xxx_messageInfo_MsgSubmitProposalResponse.Size(m)
}
func (m *MsgSubmitProposalResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSubmitProposalResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSubmitProposalResponse proto.InternalMessageInfo

func (m *MsgSubmitProposalResponse) GetProposalId() uint64 {
	if m != nil {
		return m.ProposalId
	}
	return 0
}

// MsgVote defines a message to cast a vote.
type MsgVote struct {
	ProposalId uint64                                        `protobuf:"varint,1,opt,name=proposal_id,json=proposalId,proto3" json:"proposal_id" yaml:"proposal_id"`
	Voter      github_com_cosmos_cosmos_sdk_types.AccAddress `protobuf:"bytes,2,opt,name=voter,proto3,casttype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"voter,omitempty"`
	Option     VoteOption                                    `protobuf:"varint,3,opt,name=option,proto3,enum=heimdall.gov.v1beta.VoteOption" json:"option,omitempty"`
	Validator  types1.ValidatorID                            `protobuf:"varint,4,opt,name=validator,proto3,enum=heimdall.types.ValidatorID" json:"validator,omitempty"`
}

func (m *MsgVote) Reset()         { *m = MsgVote{} }
func (m *MsgVote) String() string { return proto.CompactTextString(m) }
func (*MsgVote) ProtoMessage()    {}
func (*MsgVote) Descriptor() ([]byte, []int) {
	return fileDescriptor_bae8eb75fbe126bf, []int{2}
}
func (m *MsgVote) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MsgVote.Unmarshal(m, b)
}
func (m *MsgVote) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MsgVote.Marshal(b, m, deterministic)
}
func (m *MsgVote) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgVote.Merge(m, src)
}
func (m *MsgVote) XXX_Size() int {
	return xxx_messageInfo_MsgVote.Size(m)
}
func (m *MsgVote) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgVote.DiscardUnknown(m)
}

var xxx_messageInfo_MsgVote proto.InternalMessageInfo

// MsgVoteResponse defines the Msg/Vote response type.
type MsgVoteResponse struct {
}

func (m *MsgVoteResponse) Reset()         { *m = MsgVoteResponse{} }
func (m *MsgVoteResponse) String() string { return proto.CompactTextString(m) }
func (*MsgVoteResponse) ProtoMessage()    {}
func (*MsgVoteResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_bae8eb75fbe126bf, []int{3}
}
func (m *MsgVoteResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MsgVoteResponse.Unmarshal(m, b)
}
func (m *MsgVoteResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MsgVoteResponse.Marshal(b, m, deterministic)
}
func (m *MsgVoteResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgVoteResponse.Merge(m, src)
}
func (m *MsgVoteResponse) XXX_Size() int {
	return xxx_messageInfo_MsgVoteResponse.Size(m)
}
func (m *MsgVoteResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgVoteResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgVoteResponse proto.InternalMessageInfo

// MsgDeposit defines a message to submit a deposit to an existing proposal.
type MsgDeposit struct {
	ProposalId uint64                                        `protobuf:"varint,1,opt,name=proposal_id,json=proposalId,proto3" json:"proposal_id" yaml:"proposal_id"`
	Depositor  github_com_cosmos_cosmos_sdk_types.AccAddress `protobuf:"bytes,2,opt,name=depositor,proto3,casttype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"depositor,omitempty"`
	Amount     Coins                                         `protobuf:"bytes,3,rep,name=amount,proto3,castrepeated=Coins" json:"amount"`
	Validator  types1.ValidatorID                            `protobuf:"varint,4,opt,name=validator,proto3,enum=heimdall.types.ValidatorID" json:"validator,omitempty"`
}

func (m *MsgDeposit) Reset()         { *m = MsgDeposit{} }
func (m *MsgDeposit) String() string { return proto.CompactTextString(m) }
func (*MsgDeposit) ProtoMessage()    {}
func (*MsgDeposit) Descriptor() ([]byte, []int) {
	return fileDescriptor_bae8eb75fbe126bf, []int{4}
}
func (m *MsgDeposit) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MsgDeposit.Unmarshal(m, b)
}
func (m *MsgDeposit) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MsgDeposit.Marshal(b, m, deterministic)
}
func (m *MsgDeposit) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDeposit.Merge(m, src)
}
func (m *MsgDeposit) XXX_Size() int {
	return xxx_messageInfo_MsgDeposit.Size(m)
}
func (m *MsgDeposit) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDeposit.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDeposit proto.InternalMessageInfo

// MsgDepositResponse defines the Msg/Deposit response type.
type MsgDepositResponse struct {
}

func (m *MsgDepositResponse) Reset()         { *m = MsgDepositResponse{} }
func (m *MsgDepositResponse) String() string { return proto.CompactTextString(m) }
func (*MsgDepositResponse) ProtoMessage()    {}
func (*MsgDepositResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_bae8eb75fbe126bf, []int{5}
}
func (m *MsgDepositResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MsgDepositResponse.Unmarshal(m, b)
}
func (m *MsgDepositResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MsgDepositResponse.Marshal(b, m, deterministic)
}
func (m *MsgDepositResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDepositResponse.Merge(m, src)
}
func (m *MsgDepositResponse) XXX_Size() int {
	return xxx_messageInfo_MsgDepositResponse.Size(m)
}
func (m *MsgDepositResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDepositResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDepositResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgSubmitProposal)(nil), "heimdall.gov.v1beta.MsgSubmitProposal")
	proto.RegisterType((*MsgSubmitProposalResponse)(nil), "heimdall.gov.v1beta.MsgSubmitProposalResponse")
	proto.RegisterType((*MsgVote)(nil), "heimdall.gov.v1beta.MsgVote")
	proto.RegisterType((*MsgVoteResponse)(nil), "heimdall.gov.v1beta.MsgVoteResponse")
	proto.RegisterType((*MsgDeposit)(nil), "heimdall.gov.v1beta.MsgDeposit")
	proto.RegisterType((*MsgDepositResponse)(nil), "heimdall.gov.v1beta.MsgDepositResponse")
}

func init() { proto.RegisterFile("gov/v1beta/msg.proto", fileDescriptor_bae8eb75fbe126bf) }

var fileDescriptor_bae8eb75fbe126bf = []byte{
	// 640 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x54, 0x3d, 0x6f, 0xd3, 0x50,
	0x14, 0x75, 0x3e, 0xda, 0xd0, 0x17, 0x48, 0x55, 0x13, 0x21, 0x37, 0x20, 0x3b, 0xb2, 0x80, 0x66,
	0xa0, 0xb6, 0x1a, 0x06, 0x44, 0x59, 0x68, 0x5a, 0x15, 0x15, 0x29, 0x2a, 0x72, 0xa5, 0x0e, 0x2c,
	0x95, 0x63, 0x3f, 0x5e, 0x9f, 0x6a, 0xfb, 0x5a, 0x7e, 0x2f, 0x81, 0x6c, 0x8c, 0x8c, 0x1d, 0xf8,
	0x01, 0x1d, 0x11, 0x33, 0x3f, 0xa2, 0x62, 0xea, 0x82, 0xc4, 0x80, 0x02, 0x6a, 0x17, 0xc4, 0xd8,
	0x91, 0x09, 0xd9, 0xcf, 0x4e, 0xa2, 0x7e, 0x50, 0x44, 0x3b, 0xd9, 0xef, 0x9e, 0x73, 0xae, 0xae,
	0xce, 0xfd, 0x40, 0x55, 0x02, 0x3d, 0xb3, 0xb7, 0xd0, 0xc1, 0xdc, 0x36, 0x7d, 0x46, 0x8c, 0x30,
	0x02, 0x0e, 0xf2, 0xcd, 0x6d, 0x4c, 0x7d, 0xd7, 0xf6, 0x3c, 0x83, 0x40, 0xcf, 0x10, 0x70, 0x6d,
	0x9c, 0x1a, 0x87, 0x13, 0x6a, 0x4d, 0xcd, 0xa8, 0x26, 0xef, 0x87, 0x98, 0x99, 0x3d, 0xdb, 0xa3,
	0xae, 0xcd, 0x21, 0x4a, 0xf1, 0x59, 0x07, 0x98, 0x0f, 0x6c, 0x2b, 0x79, 0x99, 0xe2, 0x91, 0x42,
	0x55, 0x02, 0x04, 0x44, 0x3c, 0xfe, 0xcb, 0x04, 0x04, 0x80, 0x78, 0xd8, 0x4c, 0x5e, 0x9d, 0xee,
	0x2b, 0xd3, 0x0e, 0xfa, 0x02, 0xd2, 0xbf, 0xe4, 0xd1, 0x4c, 0x9b, 0x91, 0x8d, 0x6e, 0xc7, 0xa7,
	0xfc, 0x45, 0x04, 0x21, 0x30, 0xdb, 0x93, 0x9f, 0xa0, 0x92, 0x03, 0x01, 0xc7, 0x01, 0x57, 0x72,
	0xf5, 0x5c, 0xa3, 0xdc, 0xac, 0x1a, 0x22, 0x85, 0x91, 0xa5, 0x30, 0x96, 0x82, 0x7e, 0xab, 0xfc,
	0xf9, 0xd3, 0x7c, 0x69, 0x59, 0x10, 0xad, 0x4c, 0x21, 0xef, 0xa0, 0x69, 0x1a, 0x50, 0x4e, 0x6d,
	0x6f, 0xcb, 0xc5, 0x21, 0x30, 0xca, 0x95, 0x7c, 0xbd, 0xd0, 0x28, 0x37, 0x67, 0x8d, 0x33, 0x3c,
	0x30, 0x96, 0x81, 0x06, 0xad, 0xb9, 0xfd, 0x81, 0x26, 0x1d, 0x0f, 0xb4, 0x5b, 0x7d, 0xdb, 0xf7,
	0x16, 0xf5, 0x13, 0x7a, 0xfd, 0xe3, 0x77, 0x6d, 0x22, 0xe6, 0x31, 0xab, 0x92, 0x42, 0x2b, 0x02,
	0x91, 0xdb, 0xe8, 0x5a, 0x98, 0x54, 0x8d, 0x23, 0xa5, 0x50, 0xcf, 0x35, 0xa6, 0x5a, 0x0b, 0xbf,
	0x07, 0xda, 0x3c, 0xa1, 0x7c, 0xbb, 0xdb, 0x31, 0x1c, 0xf0, 0x53, 0x7f, 0xd2, 0xcf, 0x3c, 0x73,
	0x77, 0x84, 0xab, 0xc6, 0x92, 0xe3, 0x2c, 0xb9, 0x6e, 0x84, 0x19, 0xb3, 0x86, 0x29, 0xe4, 0xc7,
	0x68, 0x6a, 0xe8, 0xb6, 0x52, 0xac, 0xe7, 0x1a, 0x95, 0xe6, 0xed, 0x51, 0xd5, 0x42, 0xb8, 0x99,
	0x11, 0xd6, 0x56, 0xac, 0x11, 0x7b, 0xf1, 0xfa, 0xbb, 0x3d, 0x4d, 0xfa, 0xb9, 0xa7, 0x49, 0x6f,
	0xbf, 0xd5, 0x25, 0xdd, 0x41, 0xb3, 0xa7, 0x6c, 0xb5, 0x30, 0x0b, 0x21, 0x60, 0x58, 0x5e, 0x45,
	0xe5, 0x30, 0x8d, 0x6d, 0x51, 0x37, 0xb1, 0xb8, 0xd8, 0xba, 0xf7, 0x6b, 0xa0, 0x8d, 0x87, 0x8f,
	0x07, 0x9a, 0x2c, 0xdc, 0x18, 0x0b, 0xea, 0x16, 0xca, 0x5e, 0x6b, 0xae, 0xfe, 0x3e, 0x8f, 0x4a,
	0x6d, 0x46, 0x36, 0x81, 0x5f, 0x59, 0x4e, 0xf9, 0x19, 0x9a, 0xe8, 0x01, 0xc7, 0x91, 0x92, 0xff,
	0x5f, 0x37, 0x85, 0x5e, 0x7e, 0x84, 0x26, 0x21, 0xe4, 0x14, 0x82, 0xa4, 0x2f, 0x95, 0xa6, 0x76,
	0x66, 0xf7, 0xe3, 0xda, 0xd7, 0x13, 0x9a, 0x95, 0xd2, 0x2f, 0xd3, 0x83, 0x62, 0xdc, 0x03, 0x7d,
	0x06, 0x4d, 0xa7, 0xae, 0x64, 0x8e, 0xeb, 0x1f, 0xf2, 0x08, 0xb5, 0x19, 0xc9, 0xa6, 0xe6, 0xaa,
	0xcc, 0x5a, 0x47, 0x53, 0xe9, 0x88, 0xc2, 0x25, 0x0c, 0x1b, 0xe5, 0x90, 0x9f, 0xa2, 0x49, 0xdb,
	0x87, 0x6e, 0xc0, 0x95, 0xc2, 0x45, 0x2b, 0x73, 0x23, 0x5e, 0x99, 0xd1, 0x62, 0xa4, 0xba, 0xcb,
	0xbb, 0x57, 0x45, 0xf2, 0xc8, 0xa9, 0xcc, 0xc0, 0xe6, 0x6e, 0x1e, 0x15, 0xda, 0x8c, 0xc8, 0xdb,
	0xa8, 0x72, 0xe2, 0x56, 0xdc, 0x3f, 0xb3, 0xc4, 0x53, 0xc3, 0x5f, 0x33, 0xfe, 0x8d, 0x37, 0x5c,
	0x92, 0xe7, 0xa8, 0x98, 0x0c, 0xf6, 0x9d, 0xf3, 0x74, 0x31, 0x5a, 0xbb, 0xfb, 0x37, 0x74, 0x98,
	0x6b, 0x03, 0x95, 0xb2, 0xd6, 0x6b, 0xe7, 0x09, 0x52, 0x42, 0x6d, 0xee, 0x02, 0x42, 0x96, 0xb4,
	0xb5, 0xba, 0x7f, 0xa8, 0x4a, 0x07, 0x87, 0xaa, 0xf4, 0xe3, 0x50, 0x95, 0x76, 0x8f, 0x54, 0xe9,
	0xe0, 0x48, 0x95, 0xbe, 0x1e, 0xa9, 0xd2, 0xcb, 0x07, 0x63, 0xfd, 0xf7, 0x6d, 0x4e, 0x9d, 0x00,
	0xf3, 0xd7, 0x10, 0xed, 0x98, 0xc3, 0xc3, 0xfe, 0x26, 0x3e, 0xf7, 0x62, 0x12, 0x3a, 0x93, 0xc9,
	0x4d, 0x7d, 0xf8, 0x27, 0x00, 0x00, 0xff, 0xff, 0xad, 0x6d, 0x14, 0x37, 0x38, 0x06, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	// SubmitProposal defines a method to create new proposal given a content.
	SubmitProposal(ctx context.Context, in *MsgSubmitProposal, opts ...grpc.CallOption) (*MsgSubmitProposalResponse, error)
	// Vote defines a method to add a vote on a specific proposal.
	Vote(ctx context.Context, in *MsgVote, opts ...grpc.CallOption) (*MsgVoteResponse, error)
	// Deposit defines a method to add deposit on a specific proposal.
	Deposit(ctx context.Context, in *MsgDeposit, opts ...grpc.CallOption) (*MsgDepositResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) SubmitProposal(ctx context.Context, in *MsgSubmitProposal, opts ...grpc.CallOption) (*MsgSubmitProposalResponse, error) {
	out := new(MsgSubmitProposalResponse)
	err := c.cc.Invoke(ctx, "/heimdall.gov.v1beta.Msg/SubmitProposal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) Vote(ctx context.Context, in *MsgVote, opts ...grpc.CallOption) (*MsgVoteResponse, error) {
	out := new(MsgVoteResponse)
	err := c.cc.Invoke(ctx, "/heimdall.gov.v1beta.Msg/Vote", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) Deposit(ctx context.Context, in *MsgDeposit, opts ...grpc.CallOption) (*MsgDepositResponse, error) {
	out := new(MsgDepositResponse)
	err := c.cc.Invoke(ctx, "/heimdall.gov.v1beta.Msg/Deposit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	// SubmitProposal defines a method to create new proposal given a content.
	SubmitProposal(context.Context, *MsgSubmitProposal) (*MsgSubmitProposalResponse, error)
	// Vote defines a method to add a vote on a specific proposal.
	Vote(context.Context, *MsgVote) (*MsgVoteResponse, error)
	// Deposit defines a method to add deposit on a specific proposal.
	Deposit(context.Context, *MsgDeposit) (*MsgDepositResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) SubmitProposal(ctx context.Context, req *MsgSubmitProposal) (*MsgSubmitProposalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitProposal not implemented")
}
func (*UnimplementedMsgServer) Vote(ctx context.Context, req *MsgVote) (*MsgVoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Vote not implemented")
}
func (*UnimplementedMsgServer) Deposit(ctx context.Context, req *MsgDeposit) (*MsgDepositResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Deposit not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_SubmitProposal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSubmitProposal)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SubmitProposal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/heimdall.gov.v1beta.Msg/SubmitProposal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SubmitProposal(ctx, req.(*MsgSubmitProposal))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_Vote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgVote)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).Vote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/heimdall.gov.v1beta.Msg/Vote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).Vote(ctx, req.(*MsgVote))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_Deposit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgDeposit)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).Deposit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/heimdall.gov.v1beta.Msg/Deposit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).Deposit(ctx, req.(*MsgDeposit))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "heimdall.gov.v1beta.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SubmitProposal",
			Handler:    _Msg_SubmitProposal_Handler,
		},
		{
			MethodName: "Vote",
			Handler:    _Msg_Vote_Handler,
		},
		{
			MethodName: "Deposit",
			Handler:    _Msg_Deposit_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gov/v1beta/msg.proto",
}
